
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e70  08008e70  00009e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e8c  08008e8c  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e8c  08008e8c  00009e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e94  08008e94  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e94  08008e94  00009e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e98  08008e98  00009e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008e9c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000aa8  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b24  20000b24  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017468  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d45  00000000  00000000  00021514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00025260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1e  00000000  00000000  00026610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235c0  00000000  00000000  0002752e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab47  00000000  00000000  0004aaee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8bfc  00000000  00000000  00065635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e231  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000556c  00000000  00000000  0013e274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001437e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e58 	.word	0x08008e58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08008e58 	.word	0x08008e58

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fbac 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f80e 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f90a 	bl	8000720 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050c:	f000 f874 	bl	80005f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000510:	f000 f8a0 	bl	8000654 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000514:	f000 f8ce 	bl	80006b4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000518:	f008 f840 	bl	800859c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800051c:	f008 f864 	bl	80085e8 <MX_USB_HOST_Process>
 8000520:	e7fc      	b.n	800051c <main+0x20>
	...

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	@ 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	@ 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 fbfa 	bl	8008d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	@ (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	@ 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	@ (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000594:	2308      	movs	r3, #8
 8000596:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000598:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800059c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a2:	2307      	movs	r3, #7
 80005a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fdb8 	bl	8004120 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b6:	f000 f9b1 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2105      	movs	r1, #5
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 f819 	bl	8004610 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e4:	f000 f99a 	bl	800091c <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	@ 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_I2C1_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	@ (800064c <MX_I2C1_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <MX_I2C1_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000636:	f002 ff8f 	bl	8003558 <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f96c 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000098 	.word	0x20000098
 800064c:	40005400 	.word	0x40005400
 8000650:	000186a0 	.word	0x000186a0

08000654 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000658:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <MX_I2S3_Init+0x54>)
 800065a:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <MX_I2S3_Init+0x58>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800065e:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000664:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_I2S3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000678:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800067a:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <MX_I2S3_Init+0x54>)
 800067c:	4a0c      	ldr	r2, [pc, #48]	@ (80006b0 <MX_I2S3_Init+0x5c>)
 800067e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000694:	f003 f8a4 	bl	80037e0 <HAL_I2S_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800069e:	f000 f93d 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000ec 	.word	0x200000ec
 80006ac:	40003c00 	.word	0x40003c00
 80006b0:	00017700 	.word	0x00017700

080006b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b8:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006ba:	4a18      	ldr	r2, [pc, #96]	@ (800071c <MX_SPI1_Init+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_SPI1_Init+0x64>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_SPI1_Init+0x64>)
 8000706:	f004 fad1 	bl	8004cac <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f904 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000134 	.word	0x20000134
 800071c:	40013000 	.word	0x40013000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	@ 0x30
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	4b72      	ldr	r3, [pc, #456]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a71      	ldr	r2, [pc, #452]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b6f      	ldr	r3, [pc, #444]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	4b6b      	ldr	r3, [pc, #428]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a6a      	ldr	r2, [pc, #424]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b68      	ldr	r3, [pc, #416]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b64      	ldr	r3, [pc, #400]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a63      	ldr	r2, [pc, #396]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b61      	ldr	r3, [pc, #388]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b5d      	ldr	r3, [pc, #372]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a5c      	ldr	r2, [pc, #368]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b5a      	ldr	r3, [pc, #360]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b56      	ldr	r3, [pc, #344]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a55      	ldr	r2, [pc, #340]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b53      	ldr	r3, [pc, #332]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a4e      	ldr	r2, [pc, #312]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000904 <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	4849      	ldr	r0, [pc, #292]	@ (8000908 <MX_GPIO_Init+0x1e8>)
 80007e4:	f000 fd6a 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2101      	movs	r1, #1
 80007ec:	4847      	ldr	r0, [pc, #284]	@ (800090c <MX_GPIO_Init+0x1ec>)
 80007ee:	f000 fd65 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f2:	2200      	movs	r2, #0
 80007f4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007f8:	4845      	ldr	r0, [pc, #276]	@ (8000910 <MX_GPIO_Init+0x1f0>)
 80007fa:	f000 fd5f 	bl	80012bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fe:	2308      	movs	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	483c      	ldr	r0, [pc, #240]	@ (8000908 <MX_GPIO_Init+0x1e8>)
 8000816:	f000 fbb5 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4836      	ldr	r0, [pc, #216]	@ (800090c <MX_GPIO_Init+0x1ec>)
 8000832:	f000 fba7 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000846:	2305      	movs	r3, #5
 8000848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	482e      	ldr	r0, [pc, #184]	@ (800090c <MX_GPIO_Init+0x1ec>)
 8000852:	f000 fb97 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	482a      	ldr	r0, [pc, #168]	@ (8000914 <MX_GPIO_Init+0x1f4>)
 800086c:	f000 fb8a 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000870:	2304      	movs	r3, #4
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4825      	ldr	r0, [pc, #148]	@ (8000918 <MX_GPIO_Init+0x1f8>)
 8000884:	f000 fb7e 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	481c      	ldr	r0, [pc, #112]	@ (8000918 <MX_GPIO_Init+0x1f8>)
 80008a6:	f000 fb6d 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008aa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4813      	ldr	r0, [pc, #76]	@ (8000910 <MX_GPIO_Init+0x1f0>)
 80008c4:	f000 fb5e 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c8:	2320      	movs	r3, #32
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	480d      	ldr	r0, [pc, #52]	@ (8000910 <MX_GPIO_Init+0x1f0>)
 80008dc:	f000 fb52 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_GPIO_Init+0x1e8>)
 80008f6:	f000 fb45 	bl	8000f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	@ 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40021000 	.word	0x40021000
 800090c:	40020800 	.word	0x40020800
 8000910:	40020c00 	.word	0x40020c00
 8000914:	40020000 	.word	0x40020000
 8000918:	40020400 	.word	0x40020400

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	@ (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093c:	6453      	str	r3, [r2, #68]	@ 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000966:	2007      	movs	r0, #7
 8000968:	f000 faca 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	@ (80009fc <HAL_I2C_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12c      	bne.n	80009f4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a17      	ldr	r2, [pc, #92]	@ (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009b6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c8:	2304      	movs	r3, #4
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <HAL_I2C_MspInit+0x8c>)
 80009d4:	f000 fad6 	bl	8000f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <HAL_I2C_MspInit+0x88>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	4a07      	ldr	r2, [pc, #28]	@ (8000a00 <HAL_I2C_MspInit+0x88>)
 80009e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	@ 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020400 	.word	0x40020400

08000a08 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08e      	sub	sp, #56	@ 0x38
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a31      	ldr	r2, [pc, #196]	@ (8000af8 <HAL_I2S_MspInit+0xf0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d15a      	bne.n	8000aee <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a3c:	23c0      	movs	r3, #192	@ 0xc0
 8000a3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 ffed 	bl	8004a28 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a54:	f7ff ff62 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a60:	4a26      	ldr	r2, [pc, #152]	@ (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a84:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	4a18      	ldr	r2, [pc, #96]	@ (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <HAL_I2S_MspInit+0xf4>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aac:	2310      	movs	r3, #16
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000abc:	2306      	movs	r3, #6
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	@ (8000b00 <HAL_I2S_MspInit+0xf8>)
 8000ac8:	f000 fa5c 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000acc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ade:	2306      	movs	r3, #6
 8000ae0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <HAL_I2S_MspInit+0xfc>)
 8000aea:	f000 fa4b 	bl	8000f84 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000aee:	bf00      	nop
 8000af0:	3738      	adds	r7, #56	@ 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40003c00 	.word	0x40003c00
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <HAL_SPI_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12b      	bne.n	8000b82 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	4a17      	ldr	r2, [pc, #92]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a10      	ldr	r2, [pc, #64]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b62:	23e0      	movs	r3, #224	@ 0xe0
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b72:	2305      	movs	r3, #5
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <HAL_SPI_MspInit+0x8c>)
 8000b7e:	f000 fa01 	bl	8000f84 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	@ 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <NMI_Handler+0x4>

08000ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <MemManage_Handler+0x4>

08000bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <OTG_FS_IRQHandler+0x10>)
 8000bd6:	f000 fe6b 	bl	80018b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200005f8 	.word	0x200005f8

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f008 f891 	bl	8008d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fc5f 	bl	80004fc <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c4c:	08008e9c 	.word	0x08008e9c
  ldr r2, =_sbss
 8000c50:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c54:	20000b24 	.word	0x20000b24

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f93b 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe4a 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f953 	bl	8000f6a <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f91b 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	2000018c 	.word	0x2000018c

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff ffee 	bl	8000d00 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffde 	bl	8000d00 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	@ (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff29 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff3e 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff31 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffa2 	bl	8000ebc <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	@ 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	e16b      	b.n	8001278 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f040 815a 	bne.w	8001272 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d005      	beq.n	8000fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d130      	bne.n	8001038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100c:	2201      	movs	r2, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	091b      	lsrs	r3, r3, #4
 8001022:	f003 0201 	and.w	r2, r3, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b03      	cmp	r3, #3
 8001042:	d017      	beq.n	8001074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d123      	bne.n	80010c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3208      	adds	r2, #8
 8001088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	69b9      	ldr	r1, [r7, #24]
 80010c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0203 	and.w	r2, r3, #3
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80b4 	beq.w	8001272 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b60      	ldr	r3, [pc, #384]	@ (8001290 <HAL_GPIO_Init+0x30c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	4a5f      	ldr	r2, [pc, #380]	@ (8001290 <HAL_GPIO_Init+0x30c>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001118:	6453      	str	r3, [r2, #68]	@ 0x44
 800111a:	4b5d      	ldr	r3, [pc, #372]	@ (8001290 <HAL_GPIO_Init+0x30c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001126:	4a5b      	ldr	r2, [pc, #364]	@ (8001294 <HAL_GPIO_Init+0x310>)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a52      	ldr	r2, [pc, #328]	@ (8001298 <HAL_GPIO_Init+0x314>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d02b      	beq.n	80011aa <HAL_GPIO_Init+0x226>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a51      	ldr	r2, [pc, #324]	@ (800129c <HAL_GPIO_Init+0x318>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d025      	beq.n	80011a6 <HAL_GPIO_Init+0x222>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a50      	ldr	r2, [pc, #320]	@ (80012a0 <HAL_GPIO_Init+0x31c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d01f      	beq.n	80011a2 <HAL_GPIO_Init+0x21e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4f      	ldr	r2, [pc, #316]	@ (80012a4 <HAL_GPIO_Init+0x320>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d019      	beq.n	800119e <HAL_GPIO_Init+0x21a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4e      	ldr	r2, [pc, #312]	@ (80012a8 <HAL_GPIO_Init+0x324>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0x216>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4d      	ldr	r2, [pc, #308]	@ (80012ac <HAL_GPIO_Init+0x328>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00d      	beq.n	8001196 <HAL_GPIO_Init+0x212>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4c      	ldr	r2, [pc, #304]	@ (80012b0 <HAL_GPIO_Init+0x32c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_GPIO_Init+0x20e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4b      	ldr	r2, [pc, #300]	@ (80012b4 <HAL_GPIO_Init+0x330>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_GPIO_Init+0x20a>
 800118a:	2307      	movs	r3, #7
 800118c:	e00e      	b.n	80011ac <HAL_GPIO_Init+0x228>
 800118e:	2308      	movs	r3, #8
 8001190:	e00c      	b.n	80011ac <HAL_GPIO_Init+0x228>
 8001192:	2306      	movs	r3, #6
 8001194:	e00a      	b.n	80011ac <HAL_GPIO_Init+0x228>
 8001196:	2305      	movs	r3, #5
 8001198:	e008      	b.n	80011ac <HAL_GPIO_Init+0x228>
 800119a:	2304      	movs	r3, #4
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x228>
 800119e:	2303      	movs	r3, #3
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_Init+0x228>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_Init+0x228>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x228>
 80011aa:	2300      	movs	r3, #0
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	f002 0203 	and.w	r2, r2, #3
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	4093      	lsls	r3, r2
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011bc:	4935      	ldr	r1, [pc, #212]	@ (8001294 <HAL_GPIO_Init+0x310>)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ca:	4b3b      	ldr	r3, [pc, #236]	@ (80012b8 <HAL_GPIO_Init+0x334>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ee:	4a32      	ldr	r2, [pc, #200]	@ (80012b8 <HAL_GPIO_Init+0x334>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f4:	4b30      	ldr	r3, [pc, #192]	@ (80012b8 <HAL_GPIO_Init+0x334>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001218:	4a27      	ldr	r2, [pc, #156]	@ (80012b8 <HAL_GPIO_Init+0x334>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800121e:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <HAL_GPIO_Init+0x334>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001242:	4a1d      	ldr	r2, [pc, #116]	@ (80012b8 <HAL_GPIO_Init+0x334>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001248:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <HAL_GPIO_Init+0x334>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800126c:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <HAL_GPIO_Init+0x334>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3301      	adds	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	2b0f      	cmp	r3, #15
 800127c:	f67f ae90 	bls.w	8000fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3724      	adds	r7, #36	@ 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40013800 	.word	0x40013800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020400 	.word	0x40020400
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40021400 	.word	0x40021400
 80012b0:	40021800 	.word	0x40021800
 80012b4:	40021c00 	.word	0x40021c00
 80012b8:	40013c00 	.word	0x40013c00

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d8:	e003      	b.n	80012e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	041a      	lsls	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af02      	add	r7, sp, #8
 80012f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e059      	b.n	80013b4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d106      	bne.n	8001320 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f007 f99c 	bl	8008658 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800132e:	d102      	bne.n	8001336 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fdb4 	bl	8004ea8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7c1a      	ldrb	r2, [r3, #16]
 8001348:	f88d 2000 	strb.w	r2, [sp]
 800134c:	3304      	adds	r3, #4
 800134e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001350:	f003 fd35 	bl	8004dbe <USB_CoreInit>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2202      	movs	r2, #2
 800135e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e026      	b.n	80013b4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f003 fdac 	bl	8004eca <USB_SetCurrentMode>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e017      	b.n	80013b4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7c1a      	ldrb	r2, [r3, #16]
 800138c:	f88d 2000 	strb.w	r2, [sp]
 8001390:	3304      	adds	r3, #4
 8001392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001394:	f003 ff4e 	bl	8005234 <USB_HostInit>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2202      	movs	r2, #2
 80013a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e004      	b.n	80013b4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08b      	sub	sp, #44	@ 0x2c
 80013c0:	af04      	add	r7, sp, #16
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	70fb      	strb	r3, [r7, #3]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70bb      	strb	r3, [r7, #2]
 80013d2:	4613      	mov	r3, r2
 80013d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80013d6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80013d8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_HCD_HC_Init+0x2c>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e09d      	b.n	8001524 <HAL_HCD_HC_Init+0x168>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80013f0:	78fa      	ldrb	r2, [r7, #3]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3319      	adds	r3, #25
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3314      	adds	r3, #20
 8001414:	787a      	ldrb	r2, [r7, #1]
 8001416:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001418:	78fa      	ldrb	r2, [r7, #3]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3315      	adds	r3, #21
 8001428:	78fa      	ldrb	r2, [r7, #3]
 800142a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800142c:	78fa      	ldrb	r2, [r7, #3]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3326      	adds	r3, #38	@ 0x26
 800143c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001440:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001442:	78fa      	ldrb	r2, [r7, #3]
 8001444:	78bb      	ldrb	r3, [r7, #2]
 8001446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800144a:	b2d8      	uxtb	r0, r3
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	3316      	adds	r3, #22
 800145a:	4602      	mov	r2, r0
 800145c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	4619      	mov	r1, r3
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fbc8 	bl	8001bf8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001468:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800146c:	2b00      	cmp	r3, #0
 800146e:	da0a      	bge.n	8001486 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001470:	78fa      	ldrb	r2, [r7, #3]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	3317      	adds	r3, #23
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e009      	b.n	800149a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001486:	78fa      	ldrb	r2, [r7, #3]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	3317      	adds	r3, #23
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 f82c 	bl	80054fc <USB_GetHostSpeed>
 80014a4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80014a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d10b      	bne.n	80014c6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80014ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <HAL_HCD_HC_Init+0x10a>
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d104      	bne.n	80014c6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2bbc      	cmp	r3, #188	@ 0xbc
 80014c0:	d901      	bls.n	80014c6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80014c2:	23bc      	movs	r3, #188	@ 0xbc
 80014c4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	3318      	adds	r3, #24
 80014d6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80014da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	b298      	uxth	r0, r3
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	3328      	adds	r3, #40	@ 0x28
 80014f0:	4602      	mov	r2, r0
 80014f2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	787c      	ldrb	r4, [r7, #1]
 80014fe:	78ba      	ldrb	r2, [r7, #2]
 8001500:	78f9      	ldrb	r1, [r7, #3]
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4623      	mov	r3, r4
 8001512:	f004 f81b 	bl	800554c <USB_HC_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_HCD_HC_Halt+0x1e>
 8001546:	2302      	movs	r3, #2
 8001548:	e00f      	b.n	800156a <HAL_HCD_HC_Halt+0x3e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	78fa      	ldrb	r2, [r7, #3]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fbad 	bl	8005cba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4603      	mov	r3, r0
 8001584:	70fb      	strb	r3, [r7, #3]
 8001586:	460b      	mov	r3, r1
 8001588:	70bb      	strb	r3, [r7, #2]
 800158a:	4613      	mov	r3, r2
 800158c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800158e:	78fa      	ldrb	r2, [r7, #3]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	3317      	adds	r3, #23
 800159e:	78ba      	ldrb	r2, [r7, #2]
 80015a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015a2:	78fa      	ldrb	r2, [r7, #3]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3326      	adds	r3, #38	@ 0x26
 80015b2:	787a      	ldrb	r2, [r7, #1]
 80015b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015b6:	7c3b      	ldrb	r3, [r7, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d114      	bne.n	80015e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	332a      	adds	r3, #42	@ 0x2a
 80015cc:	2203      	movs	r2, #3
 80015ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015d0:	78fa      	ldrb	r2, [r7, #3]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3319      	adds	r3, #25
 80015e0:	7f3a      	ldrb	r2, [r7, #28]
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e009      	b.n	80015fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	332a      	adds	r3, #42	@ 0x2a
 80015f6:	2202      	movs	r2, #2
 80015f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80015fa:	787b      	ldrb	r3, [r7, #1]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	f200 8102 	bhi.w	8001806 <HAL_HCD_HC_SubmitRequest+0x292>
 8001602:	a201      	add	r2, pc, #4	@ (adr r2, 8001608 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001608:	08001619 	.word	0x08001619
 800160c:	080017f1 	.word	0x080017f1
 8001610:	080016dd 	.word	0x080016dd
 8001614:	08001767 	.word	0x08001767
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001618:	7c3b      	ldrb	r3, [r7, #16]
 800161a:	2b01      	cmp	r3, #1
 800161c:	f040 80f5 	bne.w	800180a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001620:	78bb      	ldrb	r3, [r7, #2]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d12d      	bne.n	8001682 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001626:	8b3b      	ldrh	r3, [r7, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d109      	bne.n	8001640 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800162c:	78fa      	ldrb	r2, [r7, #3]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	333d      	adds	r3, #61	@ 0x3d
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	333d      	adds	r3, #61	@ 0x3d
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10a      	bne.n	800166c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	332a      	adds	r3, #42	@ 0x2a
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800166a:	e0ce      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	332a      	adds	r3, #42	@ 0x2a
 800167c:	2202      	movs	r2, #2
 800167e:	701a      	strb	r2, [r3, #0]
      break;
 8001680:	e0c3      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	331a      	adds	r3, #26
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	f040 80b8 	bne.w	800180a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	333c      	adds	r3, #60	@ 0x3c
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	332a      	adds	r3, #42	@ 0x2a
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
      break;
 80016c4:	e0a1      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	332a      	adds	r3, #42	@ 0x2a
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
      break;
 80016da:	e096      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016dc:	78bb      	ldrb	r3, [r7, #2]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d120      	bne.n	8001724 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	333d      	adds	r3, #61	@ 0x3d
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10a      	bne.n	800170e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	1a9b      	subs	r3, r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	332a      	adds	r3, #42	@ 0x2a
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800170c:	e07e      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	332a      	adds	r3, #42	@ 0x2a
 800171e:	2202      	movs	r2, #2
 8001720:	701a      	strb	r2, [r3, #0]
      break;
 8001722:	e073      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	333c      	adds	r3, #60	@ 0x3c
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	1a9b      	subs	r3, r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	332a      	adds	r3, #42	@ 0x2a
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
      break;
 800174e:	e05d      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	1a9b      	subs	r3, r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	332a      	adds	r3, #42	@ 0x2a
 8001760:	2202      	movs	r2, #2
 8001762:	701a      	strb	r2, [r3, #0]
      break;
 8001764:	e052      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001766:	78bb      	ldrb	r3, [r7, #2]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d120      	bne.n	80017ae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	333d      	adds	r3, #61	@ 0x3d
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10a      	bne.n	8001798 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	332a      	adds	r3, #42	@ 0x2a
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001796:	e039      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	332a      	adds	r3, #42	@ 0x2a
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
      break;
 80017ac:	e02e      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	333c      	adds	r3, #60	@ 0x3c
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10a      	bne.n	80017da <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	332a      	adds	r3, #42	@ 0x2a
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
      break;
 80017d8:	e018      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	332a      	adds	r3, #42	@ 0x2a
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e00d      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	332a      	adds	r3, #42	@ 0x2a
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
      break;
 8001804:	e002      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001806:	bf00      	nop
 8001808:	e000      	b.n	800180c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800180a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	332c      	adds	r3, #44	@ 0x2c
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	8b39      	ldrh	r1, [r7, #24]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4403      	add	r3, r0
 8001830:	3334      	adds	r3, #52	@ 0x34
 8001832:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	334c      	adds	r3, #76	@ 0x4c
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	3338      	adds	r3, #56	@ 0x38
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	3315      	adds	r3, #21
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	334d      	adds	r3, #77	@ 0x4d
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	4613      	mov	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	3310      	adds	r3, #16
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	1d19      	adds	r1, r3, #4
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	799b      	ldrb	r3, [r3, #6]
 800189e:	461a      	mov	r2, r3
 80018a0:	f003 ff80 	bl	80057a4 <USB_HC_StartXfer>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop

080018b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fc75 	bl	80051b6 <USB_GetMode>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	f040 80fb 	bne.w	8001aca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fc38 	bl	800514e <USB_ReadInterrupts>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80f1 	beq.w	8001ac8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 fc2f 	bl	800514e <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018fa:	d104      	bne.n	8001906 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001904:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 fc1f 	bl	800514e <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800191a:	d104      	bne.n	8001926 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001924:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fc0f 	bl	800514e <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001936:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800193a:	d104      	bne.n	8001946 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001944:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fbff 	bl	800514e <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b02      	cmp	r3, #2
 8001958:	d103      	bne.n	8001962 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2202      	movs	r2, #2
 8001960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fbf1 	bl	800514e <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001972:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001976:	d120      	bne.n	80019ba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001980:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d113      	bne.n	80019ba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001992:	2110      	movs	r1, #16
 8001994:	6938      	ldr	r0, [r7, #16]
 8001996:	f003 fae4 	bl	8004f62 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800199a:	6938      	ldr	r0, [r7, #16]
 800199c:	f003 fb13 	bl	8004fc6 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7a5b      	ldrb	r3, [r3, #9]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d105      	bne.n	80019b4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fd04 	bl	80053bc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f006 fecd 	bl	8008754 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fbc5 	bl	800514e <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ce:	d102      	bne.n	80019d6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f001 fd4d 	bl	8003470 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fbb7 	bl	800514e <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d106      	bne.n	80019f8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f006 fe96 	bl	800871c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2208      	movs	r2, #8
 80019f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fba6 	bl	800514e <USB_ReadInterrupts>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a0c:	d139      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f004 f940 	bl	8005c98 <USB_HC_ReadInterrupt>
 8001a18:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e025      	b.n	8001a6c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d018      	beq.n	8001a66 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	015a      	lsls	r2, r3, #5
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a4a:	d106      	bne.n	8001a5a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4619      	mov	r1, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f905 	bl	8001c62 <HCD_HC_IN_IRQHandler>
 8001a58:	e005      	b.n	8001a66 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 ff67 	bl	8002934 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	795b      	ldrb	r3, [r3, #5]
 8001a70:	461a      	mov	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d3d3      	bcc.n	8001a20 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fb61 	bl	800514e <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d101      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x1ea>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_HCD_IRQHandler+0x1ec>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d014      	beq.n	8001aca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0210 	bic.w	r2, r2, #16
 8001aae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f001 fbfe 	bl	80032b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699a      	ldr	r2, [r3, #24]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0210 	orr.w	r2, r2, #16
 8001ac4:	619a      	str	r2, [r3, #24]
 8001ac6:	e000      	b.n	8001aca <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ac8:	bf00      	nop
    }
  }
}
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_HCD_Start+0x16>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e013      	b.n	8001b0e <HAL_HCD_Start+0x3e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2101      	movs	r1, #1
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fcc8 	bl	800548a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 f9c1 	bl	8004e86 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_HCD_Stop+0x16>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e00d      	b.n	8001b48 <HAL_HCD_Stop+0x32>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f004 fa1b 	bl	8005f74 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fc6a 	bl	8005436 <USB_ResetPort>
 8001b62:	4603      	mov	r3, r0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	334c      	adds	r3, #76	@ 0x4c
 8001b88:	781b      	ldrb	r3, [r3, #0]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3338      	adds	r3, #56	@ 0x38
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fcac 	bl	800552a <USB_GetCurrentFrame>
 8001bd2:	4603      	mov	r3, r0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fc87 	bl	80054fc <USB_GetHostSpeed>
 8001bee:	4603      	mov	r3, r0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	331a      	adds	r3, #26
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	331b      	adds	r3, #27
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	3325      	adds	r3, #37	@ 0x25
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3324      	adds	r3, #36	@ 0x24
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fa77 	bl	8005174 <USB_ReadChInterrupts>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d11a      	bne.n	8001cc6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	334d      	adds	r3, #77	@ 0x4d
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fffb 	bl	8005cba <USB_HC_Halt>
 8001cc4:	e09e      	b.n	8001e04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fa50 	bl	8005174 <USB_ReadChInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cde:	d11b      	bne.n	8001d18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cec:	461a      	mov	r2, r3
 8001cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	334d      	adds	r3, #77	@ 0x4d
 8001d04:	2208      	movs	r2, #8
 8001d06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 ffd2 	bl	8005cba <USB_HC_Halt>
 8001d16:	e075      	b.n	8001e04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fa27 	bl	8005174 <USB_ReadChInterrupts>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d11a      	bne.n	8001d66 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2308      	movs	r3, #8
 8001d40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	334d      	adds	r3, #77	@ 0x4d
 8001d52:	2206      	movs	r2, #6
 8001d54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 ffab 	bl	8005cba <USB_HC_Halt>
 8001d64:	e04e      	b.n	8001e04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	78fa      	ldrb	r2, [r7, #3]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fa00 	bl	8005174 <USB_ReadChInterrupts>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d7e:	d11b      	bne.n	8001db8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	334d      	adds	r3, #77	@ 0x4d
 8001da4:	2209      	movs	r2, #9
 8001da6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 ff82 	bl	8005cba <USB_HC_Halt>
 8001db6:	e025      	b.n	8001e04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 f9d7 	bl	8005174 <USB_ReadChInterrupts>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dcc:	2b80      	cmp	r3, #128	@ 0x80
 8001dce:	d119      	bne.n	8001e04 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	334d      	adds	r3, #77	@ 0x4d
 8001df2:	2207      	movs	r2, #7
 8001df4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 ff5b 	bl	8005cba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 f9b1 	bl	8005174 <USB_ReadChInterrupts>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e1c:	d112      	bne.n	8001e44 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 ff47 	bl	8005cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e3e:	6093      	str	r3, [r2, #8]
 8001e40:	f000 bd75 	b.w	800292e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 f991 	bl	8005174 <USB_ReadChInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	f040 8128 	bne.w	80020ae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	331b      	adds	r3, #27
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d119      	bne.n	8001eba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	331b      	adds	r3, #27
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	0151      	lsls	r1, r2, #5
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	440a      	add	r2, r1
 8001eb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	799b      	ldrb	r3, [r3, #6]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01b      	beq.n	8001efa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	3330      	adds	r3, #48	@ 0x30
 8001ed2:	6819      	ldr	r1, [r3, #0]
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4403      	add	r3, r0
 8001ef6:	3338      	adds	r3, #56	@ 0x38
 8001ef8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	334d      	adds	r3, #77	@ 0x4d
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3344      	adds	r3, #68	@ 0x44
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2301      	movs	r3, #1
 8001f32:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3326      	adds	r3, #38	@ 0x26
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	3326      	adds	r3, #38	@ 0x26
 8001f5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d110      	bne.n	8001f82 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fea6 	bl	8005cba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	6093      	str	r3, [r2, #8]
 8001f80:	e03d      	b.n	8001ffe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	3326      	adds	r3, #38	@ 0x26
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d00a      	beq.n	8001fae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3326      	adds	r3, #38	@ 0x26
 8001fa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d127      	bne.n	8001ffe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	0151      	lsls	r1, r2, #5
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	440a      	add	r2, r1
 8001fc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001fc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001fcc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	334c      	adds	r3, #76	@ 0x4c
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	334c      	adds	r3, #76	@ 0x4c
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f006 fbb9 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	799b      	ldrb	r3, [r3, #6]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d13b      	bne.n	800207e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	3338      	adds	r3, #56	@ 0x38
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4403      	add	r3, r0
 8002026:	3328      	adds	r3, #40	@ 0x28
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	440b      	add	r3, r1
 800202c:	1e59      	subs	r1, r3, #1
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4403      	add	r3, r0
 800203c:	3328      	adds	r3, #40	@ 0x28
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	fbb1 f3f3 	udiv	r3, r1, r3
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8470 	beq.w	800292e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	333c      	adds	r3, #60	@ 0x3c
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	f083 0301 	eor.w	r3, r3, #1
 8002066:	b2d8      	uxtb	r0, r3
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	333c      	adds	r3, #60	@ 0x3c
 8002076:	4602      	mov	r2, r0
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	f000 bc58 	b.w	800292e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	333c      	adds	r3, #60	@ 0x3c
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	f083 0301 	eor.w	r3, r3, #1
 8002096:	b2d8      	uxtb	r0, r3
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	333c      	adds	r3, #60	@ 0x3c
 80020a6:	4602      	mov	r2, r0
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	f000 bc40 	b.w	800292e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 f85c 	bl	8005174 <USB_ReadChInterrupts>
 80020bc:	4603      	mov	r3, r0
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d131      	bne.n	800212a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d2:	461a      	mov	r2, r3
 80020d4:	2320      	movs	r3, #32
 80020d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	331a      	adds	r3, #26
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	f040 841f 	bne.w	800292e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	331b      	adds	r3, #27
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	334d      	adds	r3, #77	@ 0x4d
 8002114:	2203      	movs	r2, #3
 8002116:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f003 fdca 	bl	8005cba <USB_HC_Halt>
 8002126:	f000 bc02 	b.w	800292e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f003 f81e 	bl	8005174 <USB_ReadChInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b02      	cmp	r3, #2
 8002140:	f040 8305 	bne.w	800274e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002150:	461a      	mov	r2, r3
 8002152:	2302      	movs	r3, #2
 8002154:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	334d      	adds	r3, #77	@ 0x4d
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d114      	bne.n	8002196 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	334d      	adds	r3, #77	@ 0x4d
 800217c:	2202      	movs	r2, #2
 800217e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	334c      	adds	r3, #76	@ 0x4c
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e2cc      	b.n	8002730 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	334d      	adds	r3, #77	@ 0x4d
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	d114      	bne.n	80021d6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	334d      	adds	r3, #77	@ 0x4d
 80021bc:	2202      	movs	r2, #2
 80021be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	334c      	adds	r3, #76	@ 0x4c
 80021d0:	2205      	movs	r2, #5
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e2ac      	b.n	8002730 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	334d      	adds	r3, #77	@ 0x4d
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b07      	cmp	r3, #7
 80021ea:	d00b      	beq.n	8002204 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	334d      	adds	r3, #77	@ 0x4d
 80021fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80021fe:	2b09      	cmp	r3, #9
 8002200:	f040 80a6 	bne.w	8002350 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	334d      	adds	r3, #77	@ 0x4d
 8002214:	2202      	movs	r2, #2
 8002216:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	3344      	adds	r3, #68	@ 0x44
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1c59      	adds	r1, r3, #1
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4403      	add	r3, r0
 8002238:	3344      	adds	r3, #68	@ 0x44
 800223a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	3344      	adds	r3, #68	@ 0x44
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d943      	bls.n	80022da <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	3344      	adds	r3, #68	@ 0x44
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	331a      	adds	r3, #26
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d123      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	331b      	adds	r3, #27
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	331c      	adds	r3, #28
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	0151      	lsls	r1, r2, #5
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	440a      	add	r2, r1
 80022ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	334c      	adds	r3, #76	@ 0x4c
 80022d4:	2204      	movs	r2, #4
 80022d6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022d8:	e229      	b.n	800272e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	334c      	adds	r3, #76	@ 0x4c
 80022ea:	2202      	movs	r2, #2
 80022ec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3326      	adds	r3, #38	@ 0x26
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3326      	adds	r3, #38	@ 0x26
 8002314:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002316:	2b02      	cmp	r3, #2
 8002318:	f040 8209 	bne.w	800272e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002332:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800233a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002348:	461a      	mov	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800234e:	e1ee      	b.n	800272e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	334d      	adds	r3, #77	@ 0x4d
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b05      	cmp	r3, #5
 8002364:	f040 80c8 	bne.w	80024f8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	334d      	adds	r3, #77	@ 0x4d
 8002378:	2202      	movs	r2, #2
 800237a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	331b      	adds	r3, #27
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	f040 81ce 	bne.w	8002730 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3326      	adds	r3, #38	@ 0x26
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d16b      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	3348      	adds	r3, #72	@ 0x48
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	1c59      	adds	r1, r3, #1
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4403      	add	r3, r0
 80023ca:	3348      	adds	r3, #72	@ 0x48
 80023cc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3348      	adds	r3, #72	@ 0x48
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d943      	bls.n	800246c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	3348      	adds	r3, #72	@ 0x48
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	331b      	adds	r3, #27
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3344      	adds	r3, #68	@ 0x44
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d809      	bhi.n	8002436 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	331c      	adds	r3, #28
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	0151      	lsls	r1, r2, #5
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	440a      	add	r2, r1
 800244c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002454:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	334c      	adds	r3, #76	@ 0x4c
 8002466:	2204      	movs	r2, #4
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e014      	b.n	8002496 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	334c      	adds	r3, #76	@ 0x4c
 800247c:	2202      	movs	r2, #2
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e009      	b.n	8002496 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	334c      	adds	r3, #76	@ 0x4c
 8002492:	2202      	movs	r2, #2
 8002494:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3326      	adds	r3, #38	@ 0x26
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	3326      	adds	r3, #38	@ 0x26
 80024bc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024be:	2b02      	cmp	r3, #2
 80024c0:	f040 8136 	bne.w	8002730 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80024da:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024e2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f0:	461a      	mov	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e11b      	b.n	8002730 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	334d      	adds	r3, #77	@ 0x4d
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b03      	cmp	r3, #3
 800250c:	f040 8081 	bne.w	8002612 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	334d      	adds	r3, #77	@ 0x4d
 8002520:	2202      	movs	r2, #2
 8002522:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	331b      	adds	r3, #27
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	f040 80fa 	bne.w	8002730 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	334c      	adds	r3, #76	@ 0x4c
 800254c:	2202      	movs	r2, #2
 800254e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	0151      	lsls	r1, r2, #5
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	440a      	add	r2, r1
 8002566:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800256a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	0151      	lsls	r1, r2, #5
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	440a      	add	r2, r1
 8002586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800258a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800258e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	0151      	lsls	r1, r2, #5
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	440a      	add	r2, r1
 80025a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025aa:	f023 0320 	bic.w	r3, r3, #32
 80025ae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3326      	adds	r3, #38	@ 0x26
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3326      	adds	r3, #38	@ 0x26
 80025d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025d8:	2b02      	cmp	r3, #2
 80025da:	f040 80a9 	bne.w	8002730 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800260a:	461a      	mov	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e08e      	b.n	8002730 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	334d      	adds	r3, #77	@ 0x4d
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b04      	cmp	r3, #4
 8002626:	d143      	bne.n	80026b0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	334d      	adds	r3, #77	@ 0x4d
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334c      	adds	r3, #76	@ 0x4c
 800264c:	2202      	movs	r2, #2
 800264e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3326      	adds	r3, #38	@ 0x26
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	3326      	adds	r3, #38	@ 0x26
 8002676:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002678:	2b02      	cmp	r3, #2
 800267a:	d159      	bne.n	8002730 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002692:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800269a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e03f      	b.n	8002730 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	334d      	adds	r3, #77	@ 0x4d
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d126      	bne.n	8002714 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	334d      	adds	r3, #77	@ 0x4d
 80026d6:	2202      	movs	r2, #2
 80026d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	3344      	adds	r3, #68	@ 0x44
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1c59      	adds	r1, r3, #1
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4403      	add	r3, r0
 80026fa:	3344      	adds	r3, #68	@ 0x44
 80026fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	334c      	adds	r3, #76	@ 0x4c
 800270e:	2204      	movs	r2, #4
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e00d      	b.n	8002730 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	@ 0x4d
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b02      	cmp	r3, #2
 8002728:	f000 8100 	beq.w	800292c <HCD_HC_IN_IRQHandler+0xcca>
 800272c:	e000      	b.n	8002730 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800272e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334c      	adds	r3, #76	@ 0x4c
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f006 f812 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
 800274c:	e0ef      	b.n	800292e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fd0c 	bl	8005174 <USB_ReadChInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	2b40      	cmp	r3, #64	@ 0x40
 8002764:	d12f      	bne.n	80027c6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	2340      	movs	r3, #64	@ 0x40
 8002776:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	334d      	adds	r3, #77	@ 0x4d
 8002788:	2205      	movs	r2, #5
 800278a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	331a      	adds	r3, #26
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	3344      	adds	r3, #68	@ 0x44
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fa7b 	bl	8005cba <USB_HC_Halt>
 80027c4:	e0b3      	b.n	800292e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fcd0 	bl	8005174 <USB_ReadChInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b10      	cmp	r3, #16
 80027dc:	f040 80a7 	bne.w	800292e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3326      	adds	r3, #38	@ 0x26
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d11b      	bne.n	800282e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	3344      	adds	r3, #68	@ 0x44
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	334d      	adds	r3, #77	@ 0x4d
 800281a:	2204      	movs	r2, #4
 800281c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f003 fa47 	bl	8005cba <USB_HC_Halt>
 800282c:	e03f      	b.n	80028ae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3326      	adds	r3, #38	@ 0x26
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3326      	adds	r3, #38	@ 0x26
 8002854:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002856:	2b02      	cmp	r3, #2
 8002858:	d129      	bne.n	80028ae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3344      	adds	r3, #68	@ 0x44
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	799b      	ldrb	r3, [r3, #6]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HCD_HC_IN_IRQHandler+0xc2a>
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	331b      	adds	r3, #27
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d110      	bne.n	80028ae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	334d      	adds	r3, #77	@ 0x4d
 800289c:	2204      	movs	r2, #4
 800289e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 fa06 	bl	8005cba <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	331b      	adds	r3, #27
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d129      	bne.n	8002918 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	331b      	adds	r3, #27
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	0151      	lsls	r1, r2, #5
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	440a      	add	r2, r1
 80028ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028f6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	0151      	lsls	r1, r2, #5
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	440a      	add	r2, r1
 800290e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002912:	f043 0320 	orr.w	r3, r3, #32
 8002916:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	2310      	movs	r3, #16
 8002928:	6093      	str	r3, [r2, #8]
 800292a:	e000      	b.n	800292e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800292c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f002 fc0e 	bl	8005174 <USB_ReadChInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b04      	cmp	r3, #4
 8002960:	d11b      	bne.n	800299a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800296e:	461a      	mov	r2, r3
 8002970:	2304      	movs	r3, #4
 8002972:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	334d      	adds	r3, #77	@ 0x4d
 8002984:	2207      	movs	r2, #7
 8002986:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f003 f992 	bl	8005cba <USB_HC_Halt>
 8002996:	f000 bc89 	b.w	80032ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fbe6 	bl	8005174 <USB_ReadChInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	f040 8082 	bne.w	8002ab8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c0:	461a      	mov	r2, r3
 80029c2:	2320      	movs	r3, #32
 80029c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3319      	adds	r3, #25
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d124      	bne.n	8002a26 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3319      	adds	r3, #25
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	334c      	adds	r3, #76	@ 0x4c
 8002a00:	2202      	movs	r2, #2
 8002a02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	334d      	adds	r3, #77	@ 0x4d
 8002a14:	2203      	movs	r2, #3
 8002a16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 f94a 	bl	8005cba <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	331a      	adds	r3, #26
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	f040 8437 	bne.w	80032ac <HCD_HC_OUT_IRQHandler+0x978>
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	331b      	adds	r3, #27
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 842b 	bne.w	80032ac <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3326      	adds	r3, #38	@ 0x26
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d009      	beq.n	8002a80 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	331b      	adds	r3, #27
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334d      	adds	r3, #77	@ 0x4d
 8002a90:	2203      	movs	r2, #3
 8002a92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 f90c 	bl	8005cba <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3344      	adds	r3, #68	@ 0x44
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e3f9      	b.n	80032ac <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 fb57 	bl	8005174 <USB_ReadChInterrupts>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ad0:	d111      	bne.n	8002af6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ae4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 f8e3 	bl	8005cba <USB_HC_Halt>
 8002af4:	e3da      	b.n	80032ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 fb38 	bl	8005174 <USB_ReadChInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d168      	bne.n	8002be0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3344      	adds	r3, #68	@ 0x44
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f002 fb22 	bl	8005174 <USB_ReadChInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b36:	2b40      	cmp	r3, #64	@ 0x40
 8002b38:	d112      	bne.n	8002b60 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3319      	adds	r3, #25
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2340      	movs	r3, #64	@ 0x40
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	331b      	adds	r3, #27
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d019      	beq.n	8002baa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	331b      	adds	r3, #27
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	0151      	lsls	r1, r2, #5
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	440a      	add	r2, r1
 8002ba0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2301      	movs	r3, #1
 8002bba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	334d      	adds	r3, #77	@ 0x4d
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 f86e 	bl	8005cba <USB_HC_Halt>
 8002bde:	e365      	b.n	80032ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 fac3 	bl	8005174 <USB_ReadChInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf4:	2b40      	cmp	r3, #64	@ 0x40
 8002bf6:	d139      	bne.n	8002c6c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	334d      	adds	r3, #77	@ 0x4d
 8002c08:	2205      	movs	r2, #5
 8002c0a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	331a      	adds	r3, #26
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	3319      	adds	r3, #25
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3344      	adds	r3, #68	@ 0x44
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 f831 	bl	8005cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c64:	461a      	mov	r2, r3
 8002c66:	2340      	movs	r3, #64	@ 0x40
 8002c68:	6093      	str	r3, [r2, #8]
 8002c6a:	e31f      	b.n	80032ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 fa7d 	bl	8005174 <USB_ReadChInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d11a      	bne.n	8002cba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c90:	461a      	mov	r2, r3
 8002c92:	2308      	movs	r3, #8
 8002c94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	334d      	adds	r3, #77	@ 0x4d
 8002ca6:	2206      	movs	r2, #6
 8002ca8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 f801 	bl	8005cba <USB_HC_Halt>
 8002cb8:	e2f8      	b.n	80032ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 fa56 	bl	8005174 <USB_ReadChInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d144      	bne.n	8002d5c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3344      	adds	r3, #68	@ 0x44
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	334d      	adds	r3, #77	@ 0x4d
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3319      	adds	r3, #25
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d114      	bne.n	8002d3a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3318      	adds	r3, #24
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3319      	adds	r3, #25
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f002 ffb9 	bl	8005cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d54:	461a      	mov	r2, r3
 8002d56:	2310      	movs	r3, #16
 8002d58:	6093      	str	r3, [r2, #8]
 8002d5a:	e2a7      	b.n	80032ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 fa05 	bl	8005174 <USB_ReadChInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d70:	2b80      	cmp	r3, #128	@ 0x80
 8002d72:	f040 8083 	bne.w	8002e7c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	799b      	ldrb	r3, [r3, #6]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d111      	bne.n	8002da2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	334d      	adds	r3, #77	@ 0x4d
 8002d8e:	2207      	movs	r2, #7
 8002d90:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f002 ff8d 	bl	8005cba <USB_HC_Halt>
 8002da0:	e062      	b.n	8002e68 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	3344      	adds	r3, #68	@ 0x44
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	1c59      	adds	r1, r3, #1
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4403      	add	r3, r0
 8002dc2:	3344      	adds	r3, #68	@ 0x44
 8002dc4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3344      	adds	r3, #68	@ 0x44
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d922      	bls.n	8002e22 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3344      	adds	r3, #68	@ 0x44
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	334c      	adds	r3, #76	@ 0x4c
 8002e00:	2204      	movs	r2, #4
 8002e02:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	334c      	adds	r3, #76	@ 0x4c
 8002e14:	781a      	ldrb	r2, [r3, #0]
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f005 fca8 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e20:	e022      	b.n	8002e68 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	334c      	adds	r3, #76	@ 0x4c
 8002e32:	2202      	movs	r2, #2
 8002e34:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e4c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e54:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e74:	461a      	mov	r2, r3
 8002e76:	2380      	movs	r3, #128	@ 0x80
 8002e78:	6093      	str	r3, [r2, #8]
 8002e7a:	e217      	b.n	80032ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f002 f975 	bl	8005174 <USB_ReadChInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e94:	d11b      	bne.n	8002ece <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	334d      	adds	r3, #77	@ 0x4d
 8002ea6:	2209      	movs	r2, #9
 8002ea8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 ff01 	bl	8005cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eca:	6093      	str	r3, [r2, #8]
 8002ecc:	e1ee      	b.n	80032ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 f94c 	bl	8005174 <USB_ReadChInterrupts>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	f040 81df 	bne.w	80032a6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	334d      	adds	r3, #77	@ 0x4d
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	f040 8093 	bne.w	8003038 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	334d      	adds	r3, #77	@ 0x4d
 8002f22:	2202      	movs	r2, #2
 8002f24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	334c      	adds	r3, #76	@ 0x4c
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	3326      	adds	r3, #38	@ 0x26
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d00b      	beq.n	8002f68 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3326      	adds	r3, #38	@ 0x26
 8002f60:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	f040 8190 	bne.w	8003288 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	799b      	ldrb	r3, [r3, #6]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d115      	bne.n	8002f9c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	333d      	adds	r3, #61	@ 0x3d
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	f083 0301 	eor.w	r3, r3, #1
 8002f88:	b2d8      	uxtb	r0, r3
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	333d      	adds	r3, #61	@ 0x3d
 8002f98:	4602      	mov	r2, r0
 8002f9a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	799b      	ldrb	r3, [r3, #6]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f040 8171 	bne.w	8003288 <HCD_HC_OUT_IRQHandler+0x954>
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3334      	adds	r3, #52	@ 0x34
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8165 	beq.w	8003288 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3334      	adds	r3, #52	@ 0x34
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4403      	add	r3, r0
 8002fde:	3328      	adds	r3, #40	@ 0x28
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	440b      	add	r3, r1
 8002fe4:	1e59      	subs	r1, r3, #1
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4403      	add	r3, r0
 8002ff4:	3328      	adds	r3, #40	@ 0x28
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ffc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 813f 	beq.w	8003288 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	333d      	adds	r3, #61	@ 0x3d
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	f083 0301 	eor.w	r3, r3, #1
 8003022:	b2d8      	uxtb	r0, r3
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	333d      	adds	r3, #61	@ 0x3d
 8003032:	4602      	mov	r2, r0
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	e127      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	334d      	adds	r3, #77	@ 0x4d
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b03      	cmp	r3, #3
 800304c:	d120      	bne.n	8003090 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	334d      	adds	r3, #77	@ 0x4d
 800305e:	2202      	movs	r2, #2
 8003060:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	331b      	adds	r3, #27
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	f040 8107 	bne.w	8003288 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	334c      	adds	r3, #76	@ 0x4c
 800308a:	2202      	movs	r2, #2
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e0fb      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	334d      	adds	r3, #77	@ 0x4d
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d13a      	bne.n	800311c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	334d      	adds	r3, #77	@ 0x4d
 80030b6:	2202      	movs	r2, #2
 80030b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	334c      	adds	r3, #76	@ 0x4c
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	331b      	adds	r3, #27
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	f040 80d1 	bne.w	8003288 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	331b      	adds	r3, #27
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	0151      	lsls	r1, r2, #5
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	440a      	add	r2, r1
 8003110:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003118:	6053      	str	r3, [r2, #4]
 800311a:	e0b5      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	334d      	adds	r3, #77	@ 0x4d
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b05      	cmp	r3, #5
 8003130:	d114      	bne.n	800315c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	334d      	adds	r3, #77	@ 0x4d
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	334c      	adds	r3, #76	@ 0x4c
 8003156:	2202      	movs	r2, #2
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e095      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	334d      	adds	r3, #77	@ 0x4d
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b06      	cmp	r3, #6
 8003170:	d114      	bne.n	800319c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	334d      	adds	r3, #77	@ 0x4d
 8003182:	2202      	movs	r2, #2
 8003184:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	334c      	adds	r3, #76	@ 0x4c
 8003196:	2205      	movs	r2, #5
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e075      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	334d      	adds	r3, #77	@ 0x4d
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b07      	cmp	r3, #7
 80031b0:	d00a      	beq.n	80031c8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	334d      	adds	r3, #77	@ 0x4d
 80031c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031c4:	2b09      	cmp	r3, #9
 80031c6:	d170      	bne.n	80032aa <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334d      	adds	r3, #77	@ 0x4d
 80031d8:	2202      	movs	r2, #2
 80031da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	3344      	adds	r3, #68	@ 0x44
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	1c59      	adds	r1, r3, #1
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4403      	add	r3, r0
 80031fc:	3344      	adds	r3, #68	@ 0x44
 80031fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3344      	adds	r3, #68	@ 0x44
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d914      	bls.n	8003240 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3344      	adds	r3, #68	@ 0x44
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	334c      	adds	r3, #76	@ 0x4c
 800323a:	2204      	movs	r2, #4
 800323c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800323e:	e022      	b.n	8003286 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334c      	adds	r3, #76	@ 0x4c
 8003250:	2202      	movs	r2, #2
 8003252:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800326a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003272:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003280:	461a      	mov	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003286:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334c      	adds	r3, #76	@ 0x4c
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	4619      	mov	r1, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f005 fa66 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032a4:	e002      	b.n	80032ac <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80032a6:	bf00      	nop
 80032a8:	e000      	b.n	80032ac <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80032aa:	bf00      	nop
  }
}
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b08a      	sub	sp, #40	@ 0x28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	0c5b      	lsrs	r3, r3, #17
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d004      	beq.n	80032f8 <HCD_RXQLVL_IRQHandler+0x46>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b05      	cmp	r3, #5
 80032f2:	f000 80b6 	beq.w	8003462 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032f6:	e0b7      	b.n	8003468 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80b3 	beq.w	8003466 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	332c      	adds	r3, #44	@ 0x2c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80a7 	beq.w	8003466 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	3338      	adds	r3, #56	@ 0x38
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	18d1      	adds	r1, r2, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4403      	add	r3, r0
 800333c:	3334      	adds	r3, #52	@ 0x34
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4299      	cmp	r1, r3
 8003342:	f200 8083 	bhi.w	800344c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	332c      	adds	r3, #44	@ 0x2c
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	b292      	uxth	r2, r2
 8003360:	4619      	mov	r1, r3
 8003362:	f001 fe9c 	bl	800509e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	332c      	adds	r3, #44	@ 0x2c
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	18d1      	adds	r1, r2, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4403      	add	r3, r0
 800338a:	332c      	adds	r3, #44	@ 0x2c
 800338c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3338      	adds	r3, #56	@ 0x38
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	18d1      	adds	r1, r2, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4403      	add	r3, r0
 80033b2:	3338      	adds	r3, #56	@ 0x38
 80033b4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	0cdb      	lsrs	r3, r3, #19
 80033c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3328      	adds	r3, #40	@ 0x28
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d13f      	bne.n	8003466 <HCD_RXQLVL_IRQHandler+0x1b4>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d03c      	beq.n	8003466 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003402:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800340a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	333c      	adds	r3, #60	@ 0x3c
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	f083 0301 	eor.w	r3, r3, #1
 8003434:	b2d8      	uxtb	r0, r3
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	333c      	adds	r3, #60	@ 0x3c
 8003446:	4602      	mov	r2, r0
 8003448:	701a      	strb	r2, [r3, #0]
      break;
 800344a:	e00c      	b.n	8003466 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334c      	adds	r3, #76	@ 0x4c
 800345c:	2204      	movs	r2, #4
 800345e:	701a      	strb	r2, [r3, #0]
      break;
 8003460:	e001      	b.n	8003466 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003466:	bf00      	nop
  }
}
 8003468:	bf00      	nop
 800346a:	3728      	adds	r7, #40	@ 0x28
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800349c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d10b      	bne.n	80034c0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d102      	bne.n	80034b8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f005 f940 	bl	8008738 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d132      	bne.n	8003530 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f043 0308 	orr.w	r3, r3, #8
 80034d0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d126      	bne.n	800352a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	7a5b      	ldrb	r3, [r3, #9]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d113      	bne.n	800350c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80034ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034ee:	d106      	bne.n	80034fe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2102      	movs	r1, #2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 ff60 	bl	80053bc <USB_InitFSLSPClkSel>
 80034fc:	e011      	b.n	8003522 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2101      	movs	r1, #1
 8003504:	4618      	mov	r0, r3
 8003506:	f001 ff59 	bl	80053bc <USB_InitFSLSPClkSel>
 800350a:	e00a      	b.n	8003522 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	79db      	ldrb	r3, [r3, #7]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d106      	bne.n	8003522 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800351a:	461a      	mov	r2, r3
 800351c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003520:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f005 f932 	bl	800878c <HAL_HCD_PortEnabled_Callback>
 8003528:	e002      	b.n	8003530 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f005 f93c 	bl	80087a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b20      	cmp	r3, #32
 8003538:	d103      	bne.n	8003542 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f043 0320 	orr.w	r3, r3, #32
 8003540:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003548:	461a      	mov	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6013      	str	r3, [r2, #0]
}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e12b      	b.n	80037c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd f9fa 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	@ 0x24
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035bc:	f001 fa20 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 80035c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a81      	ldr	r2, [pc, #516]	@ (80037cc <HAL_I2C_Init+0x274>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d807      	bhi.n	80035dc <HAL_I2C_Init+0x84>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a80      	ldr	r2, [pc, #512]	@ (80037d0 <HAL_I2C_Init+0x278>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bf94      	ite	ls
 80035d4:	2301      	movls	r3, #1
 80035d6:	2300      	movhi	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e006      	b.n	80035ea <HAL_I2C_Init+0x92>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a7d      	ldr	r2, [pc, #500]	@ (80037d4 <HAL_I2C_Init+0x27c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	bf94      	ite	ls
 80035e4:	2301      	movls	r3, #1
 80035e6:	2300      	movhi	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0e7      	b.n	80037c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a78      	ldr	r2, [pc, #480]	@ (80037d8 <HAL_I2C_Init+0x280>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	0c9b      	lsrs	r3, r3, #18
 80035fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a6a      	ldr	r2, [pc, #424]	@ (80037cc <HAL_I2C_Init+0x274>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d802      	bhi.n	800362c <HAL_I2C_Init+0xd4>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3301      	adds	r3, #1
 800362a:	e009      	b.n	8003640 <HAL_I2C_Init+0xe8>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	4a69      	ldr	r2, [pc, #420]	@ (80037dc <HAL_I2C_Init+0x284>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	3301      	adds	r3, #1
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	430b      	orrs	r3, r1
 8003646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003652:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	495c      	ldr	r1, [pc, #368]	@ (80037cc <HAL_I2C_Init+0x274>)
 800365c:	428b      	cmp	r3, r1
 800365e:	d819      	bhi.n	8003694 <HAL_I2C_Init+0x13c>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1e59      	subs	r1, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fbb1 f3f3 	udiv	r3, r1, r3
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003674:	400b      	ands	r3, r1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_I2C_Init+0x138>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1e59      	subs	r1, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fbb1 f3f3 	udiv	r3, r1, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	e051      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 8003690:	2304      	movs	r3, #4
 8003692:	e04f      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d111      	bne.n	80036c0 <HAL_I2C_Init+0x168>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e58      	subs	r0, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	440b      	add	r3, r1
 80036aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e012      	b.n	80036e6 <HAL_I2C_Init+0x18e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1e58      	subs	r0, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	0099      	lsls	r1, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d6:	3301      	adds	r3, #1
 80036d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Init+0x196>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e022      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10e      	bne.n	8003714 <HAL_I2C_Init+0x1bc>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1e58      	subs	r0, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	440b      	add	r3, r1
 8003704:	fbb0 f3f3 	udiv	r3, r0, r3
 8003708:	3301      	adds	r3, #1
 800370a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003712:	e00f      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1e58      	subs	r0, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	0099      	lsls	r1, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	fbb0 f3f3 	udiv	r3, r0, r3
 800372a:	3301      	adds	r3, #1
 800372c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003730:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	6809      	ldr	r1, [r1, #0]
 8003738:	4313      	orrs	r3, r2
 800373a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003762:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6911      	ldr	r1, [r2, #16]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68d2      	ldr	r2, [r2, #12]
 800376e:	4311      	orrs	r1, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	430b      	orrs	r3, r1
 8003776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	000186a0 	.word	0x000186a0
 80037d0:	001e847f 	.word	0x001e847f
 80037d4:	003d08ff 	.word	0x003d08ff
 80037d8:	431bde83 	.word	0x431bde83
 80037dc:	10624dd3 	.word	0x10624dd3

080037e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e128      	b.n	8003a44 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a90      	ldr	r2, [pc, #576]	@ (8003a4c <HAL_I2S_Init+0x26c>)
 800380a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7fd f8fb 	bl	8000a08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003828:	f023 030f 	bic.w	r3, r3, #15
 800382c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2202      	movs	r2, #2
 8003834:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d060      	beq.n	8003900 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003846:	2310      	movs	r3, #16
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e001      	b.n	8003850 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800384c:	2320      	movs	r3, #32
 800384e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b20      	cmp	r3, #32
 8003856:	d802      	bhi.n	800385e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800385e:	2001      	movs	r0, #1
 8003860:	f001 f9c4 	bl	8004bec <HAL_RCCEx_GetPeriphCLKFreq>
 8003864:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800386e:	d125      	bne.n	80038bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d010      	beq.n	800389a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	461a      	mov	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	3305      	adds	r3, #5
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	e01f      	b.n	80038da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	461a      	mov	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b6:	3305      	adds	r3, #5
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e00e      	b.n	80038da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	461a      	mov	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	3305      	adds	r3, #5
 80038d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4a5c      	ldr	r2, [pc, #368]	@ (8003a50 <HAL_I2S_Init+0x270>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	08db      	lsrs	r3, r3, #3
 80038e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	e003      	b.n	8003908 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003900:	2302      	movs	r3, #2
 8003902:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d902      	bls.n	8003914 <HAL_I2S_Init+0x134>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2bff      	cmp	r3, #255	@ 0xff
 8003912:	d907      	bls.n	8003924 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003918:	f043 0210 	orr.w	r2, r3, #16
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e08f      	b.n	8003a44 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	ea42 0103 	orr.w	r1, r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	430a      	orrs	r2, r1
 8003936:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003942:	f023 030f 	bic.w	r3, r3, #15
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6851      	ldr	r1, [r2, #4]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6892      	ldr	r2, [r2, #8]
 800394e:	4311      	orrs	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	68d2      	ldr	r2, [r2, #12]
 8003954:	4311      	orrs	r1, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6992      	ldr	r2, [r2, #24]
 800395a:	430a      	orrs	r2, r1
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003966:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d161      	bne.n	8003a34 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a38      	ldr	r2, [pc, #224]	@ (8003a54 <HAL_I2S_Init+0x274>)
 8003974:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a37      	ldr	r2, [pc, #220]	@ (8003a58 <HAL_I2S_Init+0x278>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_I2S_Init+0x1a4>
 8003980:	4b36      	ldr	r3, [pc, #216]	@ (8003a5c <HAL_I2S_Init+0x27c>)
 8003982:	e001      	b.n	8003988 <HAL_I2S_Init+0x1a8>
 8003984:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	4932      	ldr	r1, [pc, #200]	@ (8003a58 <HAL_I2S_Init+0x278>)
 8003990:	428a      	cmp	r2, r1
 8003992:	d101      	bne.n	8003998 <HAL_I2S_Init+0x1b8>
 8003994:	4a31      	ldr	r2, [pc, #196]	@ (8003a5c <HAL_I2S_Init+0x27c>)
 8003996:	e001      	b.n	800399c <HAL_I2S_Init+0x1bc>
 8003998:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800399c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039a0:	f023 030f 	bic.w	r3, r3, #15
 80039a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003a58 <HAL_I2S_Init+0x278>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <HAL_I2S_Init+0x1d4>
 80039b0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a5c <HAL_I2S_Init+0x27c>)
 80039b2:	e001      	b.n	80039b8 <HAL_I2S_Init+0x1d8>
 80039b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039b8:	2202      	movs	r2, #2
 80039ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a25      	ldr	r2, [pc, #148]	@ (8003a58 <HAL_I2S_Init+0x278>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_I2S_Init+0x1ea>
 80039c6:	4b25      	ldr	r3, [pc, #148]	@ (8003a5c <HAL_I2S_Init+0x27c>)
 80039c8:	e001      	b.n	80039ce <HAL_I2S_Init+0x1ee>
 80039ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039da:	d003      	beq.n	80039e4 <HAL_I2S_Init+0x204>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d103      	bne.n	80039ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80039e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	e001      	b.n	80039f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039fa:	4313      	orrs	r3, r2
 80039fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a04:	4313      	orrs	r3, r2
 8003a06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a1c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <HAL_I2S_Init+0x278>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <HAL_I2S_Init+0x24c>
 8003a28:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <HAL_I2S_Init+0x27c>)
 8003a2a:	e001      	b.n	8003a30 <HAL_I2S_Init+0x250>
 8003a2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a30:	897a      	ldrh	r2, [r7, #10]
 8003a32:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	08003b57 	.word	0x08003b57
 8003a50:	cccccccd 	.word	0xcccccccd
 8003a54:	08003c6d 	.word	0x08003c6d
 8003a58:	40003800 	.word	0x40003800
 8003a5c:	40003400 	.word	0x40003400

08003a60 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	881a      	ldrh	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	1c9a      	adds	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10e      	bne.n	8003af0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ae0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ffb8 	bl	8003a60 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0a:	b292      	uxth	r2, r2
 8003b0c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b12:	1c9a      	adds	r2, r3, #2
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10e      	bne.n	8003b4e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b3e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff93 	bl	8003a74 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d13a      	bne.n	8003be8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d109      	bne.n	8003b90 <I2S_IRQHandler+0x3a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b86:	2b40      	cmp	r3, #64	@ 0x40
 8003b88:	d102      	bne.n	8003b90 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ffb4 	bl	8003af8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b96:	2b40      	cmp	r3, #64	@ 0x40
 8003b98:	d126      	bne.n	8003be8 <I2S_IRQHandler+0x92>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d11f      	bne.n	8003be8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bb6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bda:	f043 0202 	orr.w	r2, r3, #2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ff50 	bl	8003a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d136      	bne.n	8003c62 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d109      	bne.n	8003c12 <I2S_IRQHandler+0xbc>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c08:	2b80      	cmp	r3, #128	@ 0x80
 8003c0a:	d102      	bne.n	8003c12 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff45 	bl	8003a9c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d122      	bne.n	8003c62 <I2S_IRQHandler+0x10c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d11b      	bne.n	8003c62 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c38:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c54:	f043 0204 	orr.w	r2, r3, #4
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ff13 	bl	8003a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c62:	bf00      	nop
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a92      	ldr	r2, [pc, #584]	@ (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c86:	4b92      	ldr	r3, [pc, #584]	@ (8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c88:	e001      	b.n	8003c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a8b      	ldr	r2, [pc, #556]	@ (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d101      	bne.n	8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ca4:	4b8a      	ldr	r3, [pc, #552]	@ (8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ca6:	e001      	b.n	8003cac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ca8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb8:	d004      	beq.n	8003cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 8099 	bne.w	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d107      	bne.n	8003cde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f925 	bl	8003f28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f9c8 	bl	8004088 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfe:	2b40      	cmp	r3, #64	@ 0x40
 8003d00:	d13a      	bne.n	8003d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d035      	beq.n	8003d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a6e      	ldr	r2, [pc, #440]	@ (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d16:	4b6e      	ldr	r3, [pc, #440]	@ (8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d18:	e001      	b.n	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4969      	ldr	r1, [pc, #420]	@ (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d26:	428b      	cmp	r3, r1
 8003d28:	d101      	bne.n	8003d2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d2a:	4b69      	ldr	r3, [pc, #420]	@ (8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d2c:	e001      	b.n	8003d32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d32:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d36:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	f043 0202 	orr.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff fe88 	bl	8003a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	f040 80c3 	bne.w	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 80bd 	beq.w	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a49      	ldr	r2, [pc, #292]	@ (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003daa:	4b49      	ldr	r3, [pc, #292]	@ (8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dac:	e001      	b.n	8003db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003dae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4944      	ldr	r1, [pc, #272]	@ (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dba:	428b      	cmp	r3, r1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003dbe:	4b44      	ldr	r3, [pc, #272]	@ (8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dc0:	e001      	b.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003dc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dc6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff fe4a 	bl	8003a88 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003df4:	e089      	b.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d107      	bne.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8be 	bl	8003f8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d107      	bne.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f8fd 	bl	8004024 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e30:	2b40      	cmp	r3, #64	@ 0x40
 8003e32:	d12f      	bne.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d02a      	beq.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1e      	ldr	r2, [pc, #120]	@ (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e5a:	e001      	b.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4919      	ldr	r1, [pc, #100]	@ (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e68:	428b      	cmp	r3, r1
 8003e6a:	d101      	bne.n	8003e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e6e:	e001      	b.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e74:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	f043 0202 	orr.w	r2, r3, #2
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fdfa 	bl	8003a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d136      	bne.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d031      	beq.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a07      	ldr	r2, [pc, #28]	@ (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003eb2:	4b07      	ldr	r3, [pc, #28]	@ (8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb4:	e001      	b.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003eb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4902      	ldr	r1, [pc, #8]	@ (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ec2:	428b      	cmp	r3, r1
 8003ec4:	d106      	bne.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003ec6:	4b02      	ldr	r3, [pc, #8]	@ (8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec8:	e006      	b.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003eca:	bf00      	nop
 8003ecc:	40003800 	.word	0x40003800
 8003ed0:	40003400 	.word	0x40003400
 8003ed4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ed8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003edc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	f043 0204 	orr.w	r2, r3, #4
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fdc0 	bl	8003a88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f08:	e000      	b.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f0a:	bf00      	nop
}
 8003f0c:	bf00      	nop
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	1c99      	adds	r1, r3, #2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6251      	str	r1, [r2, #36]	@ 0x24
 8003f3a:	881a      	ldrh	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d113      	bne.n	8003f82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ffc9 	bl	8003f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	1c99      	adds	r1, r3, #2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6251      	str	r1, [r2, #36]	@ 0x24
 8003f9e:	8819      	ldrh	r1, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800401c <I2SEx_TxISR_I2SExt+0x90>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <I2SEx_TxISR_I2SExt+0x22>
 8003faa:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <I2SEx_TxISR_I2SExt+0x94>)
 8003fac:	e001      	b.n	8003fb2 <I2SEx_TxISR_I2SExt+0x26>
 8003fae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fb2:	460a      	mov	r2, r1
 8003fb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d121      	bne.n	8004012 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a12      	ldr	r2, [pc, #72]	@ (800401c <I2SEx_TxISR_I2SExt+0x90>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d101      	bne.n	8003fdc <I2SEx_TxISR_I2SExt+0x50>
 8003fd8:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <I2SEx_TxISR_I2SExt+0x94>)
 8003fda:	e001      	b.n	8003fe0 <I2SEx_TxISR_I2SExt+0x54>
 8003fdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	490d      	ldr	r1, [pc, #52]	@ (800401c <I2SEx_TxISR_I2SExt+0x90>)
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	d101      	bne.n	8003ff0 <I2SEx_TxISR_I2SExt+0x64>
 8003fec:	4b0c      	ldr	r3, [pc, #48]	@ (8004020 <I2SEx_TxISR_I2SExt+0x94>)
 8003fee:	e001      	b.n	8003ff4 <I2SEx_TxISR_I2SExt+0x68>
 8003ff0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ff8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d106      	bne.n	8004012 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff81 	bl	8003f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40003800 	.word	0x40003800
 8004020:	40003400 	.word	0x40003400

08004024 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68d8      	ldr	r0, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	1c99      	adds	r1, r3, #2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800403c:	b282      	uxth	r2, r0
 800403e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d113      	bne.n	8004080 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004066:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ff4a 	bl	8003f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a20      	ldr	r2, [pc, #128]	@ (8004118 <I2SEx_RxISR_I2SExt+0x90>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <I2SEx_RxISR_I2SExt+0x16>
 800409a:	4b20      	ldr	r3, [pc, #128]	@ (800411c <I2SEx_RxISR_I2SExt+0x94>)
 800409c:	e001      	b.n	80040a2 <I2SEx_RxISR_I2SExt+0x1a>
 800409e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a2:	68d8      	ldr	r0, [r3, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	1c99      	adds	r1, r3, #2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80040ae:	b282      	uxth	r2, r0
 80040b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d121      	bne.n	800410e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a12      	ldr	r2, [pc, #72]	@ (8004118 <I2SEx_RxISR_I2SExt+0x90>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <I2SEx_RxISR_I2SExt+0x50>
 80040d4:	4b11      	ldr	r3, [pc, #68]	@ (800411c <I2SEx_RxISR_I2SExt+0x94>)
 80040d6:	e001      	b.n	80040dc <I2SEx_RxISR_I2SExt+0x54>
 80040d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	490d      	ldr	r1, [pc, #52]	@ (8004118 <I2SEx_RxISR_I2SExt+0x90>)
 80040e4:	428b      	cmp	r3, r1
 80040e6:	d101      	bne.n	80040ec <I2SEx_RxISR_I2SExt+0x64>
 80040e8:	4b0c      	ldr	r3, [pc, #48]	@ (800411c <I2SEx_RxISR_I2SExt+0x94>)
 80040ea:	e001      	b.n	80040f0 <I2SEx_RxISR_I2SExt+0x68>
 80040ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff03 	bl	8003f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40003800 	.word	0x40003800
 800411c:	40003400 	.word	0x40003400

08004120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e267      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d075      	beq.n	800422a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800413e:	4b88      	ldr	r3, [pc, #544]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b04      	cmp	r3, #4
 8004148:	d00c      	beq.n	8004164 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414a:	4b85      	ldr	r3, [pc, #532]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004152:	2b08      	cmp	r3, #8
 8004154:	d112      	bne.n	800417c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004156:	4b82      	ldr	r3, [pc, #520]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800415e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004162:	d10b      	bne.n	800417c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	4b7e      	ldr	r3, [pc, #504]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d05b      	beq.n	8004228 <HAL_RCC_OscConfig+0x108>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d157      	bne.n	8004228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e242      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004184:	d106      	bne.n	8004194 <HAL_RCC_OscConfig+0x74>
 8004186:	4b76      	ldr	r3, [pc, #472]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a75      	ldr	r2, [pc, #468]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e01d      	b.n	80041d0 <HAL_RCC_OscConfig+0xb0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x98>
 800419e:	4b70      	ldr	r3, [pc, #448]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a6f      	ldr	r2, [pc, #444]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6c      	ldr	r2, [pc, #432]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e00b      	b.n	80041d0 <HAL_RCC_OscConfig+0xb0>
 80041b8:	4b69      	ldr	r3, [pc, #420]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a68      	ldr	r2, [pc, #416]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4b66      	ldr	r3, [pc, #408]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a65      	ldr	r2, [pc, #404]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d013      	beq.n	8004200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fc fd92 	bl	8000d00 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e0:	f7fc fd8e 	bl	8000d00 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	@ 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e207      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0xc0>
 80041fe:	e014      	b.n	800422a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fc fd7e 	bl	8000d00 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004208:	f7fc fd7a 	bl	8000d00 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	@ 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e1f3      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421a:	4b51      	ldr	r3, [pc, #324]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0xe8>
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d063      	beq.n	80042fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004236:	4b4a      	ldr	r3, [pc, #296]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004242:	4b47      	ldr	r3, [pc, #284]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800424a:	2b08      	cmp	r3, #8
 800424c:	d11c      	bne.n	8004288 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424e:	4b44      	ldr	r3, [pc, #272]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d116      	bne.n	8004288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425a:	4b41      	ldr	r3, [pc, #260]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_RCC_OscConfig+0x152>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e1c7      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004272:	4b3b      	ldr	r3, [pc, #236]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4937      	ldr	r1, [pc, #220]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004286:	e03a      	b.n	80042fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004290:	4b34      	ldr	r3, [pc, #208]	@ (8004364 <HAL_RCC_OscConfig+0x244>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7fc fd33 	bl	8000d00 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429e:	f7fc fd2f 	bl	8000d00 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e1a8      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042bc:	4b28      	ldr	r3, [pc, #160]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4925      	ldr	r1, [pc, #148]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]
 80042d0:	e015      	b.n	80042fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d2:	4b24      	ldr	r3, [pc, #144]	@ (8004364 <HAL_RCC_OscConfig+0x244>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fc fd12 	bl	8000d00 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fc fd0e 	bl	8000d00 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e187      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d036      	beq.n	8004378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004312:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <HAL_RCC_OscConfig+0x248>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fc fcf2 	bl	8000d00 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004320:	f7fc fcee 	bl	8000d00 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e167      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004332:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_OscConfig+0x240>)
 8004334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x200>
 800433e:	e01b      	b.n	8004378 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004340:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <HAL_RCC_OscConfig+0x248>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004346:	f7fc fcdb 	bl	8000d00 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434c:	e00e      	b.n	800436c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434e:	f7fc fcd7 	bl	8000d00 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d907      	bls.n	800436c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e150      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
 8004360:	40023800 	.word	0x40023800
 8004364:	42470000 	.word	0x42470000
 8004368:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	4b88      	ldr	r3, [pc, #544]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800436e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ea      	bne.n	800434e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8097 	beq.w	80044b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438a:	4b81      	ldr	r3, [pc, #516]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	4b7d      	ldr	r3, [pc, #500]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	4a7c      	ldr	r2, [pc, #496]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b77      	ldr	r3, [pc, #476]	@ (8004594 <HAL_RCC_OscConfig+0x474>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d118      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c2:	4b74      	ldr	r3, [pc, #464]	@ (8004594 <HAL_RCC_OscConfig+0x474>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a73      	ldr	r2, [pc, #460]	@ (8004594 <HAL_RCC_OscConfig+0x474>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fc fc97 	bl	8000d00 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d6:	f7fc fc93 	bl	8000d00 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e10c      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004594 <HAL_RCC_OscConfig+0x474>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x2ea>
 80043fc:	4b64      	ldr	r3, [pc, #400]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004400:	4a63      	ldr	r2, [pc, #396]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	@ 0x70
 8004408:	e01c      	b.n	8004444 <HAL_RCC_OscConfig+0x324>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b05      	cmp	r3, #5
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x30c>
 8004412:	4b5f      	ldr	r3, [pc, #380]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	4a5e      	ldr	r2, [pc, #376]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004418:	f043 0304 	orr.w	r3, r3, #4
 800441c:	6713      	str	r3, [r2, #112]	@ 0x70
 800441e:	4b5c      	ldr	r3, [pc, #368]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	4a5b      	ldr	r2, [pc, #364]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6713      	str	r3, [r2, #112]	@ 0x70
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0x324>
 800442c:	4b58      	ldr	r3, [pc, #352]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	4a57      	ldr	r2, [pc, #348]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	6713      	str	r3, [r2, #112]	@ 0x70
 8004438:	4b55      	ldr	r3, [pc, #340]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443c:	4a54      	ldr	r2, [pc, #336]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800443e:	f023 0304 	bic.w	r3, r3, #4
 8004442:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fc fc58 	bl	8000d00 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fc fc54 	bl	8000d00 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0cb      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	4b49      	ldr	r3, [pc, #292]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ee      	beq.n	8004454 <HAL_RCC_OscConfig+0x334>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004478:	f7fc fc42 	bl	8000d00 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	e00a      	b.n	8004496 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fc fc3e 	bl	8000d00 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0b5      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004496:	4b3e      	ldr	r3, [pc, #248]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ee      	bne.n	8004480 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a8:	4b39      	ldr	r3, [pc, #228]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	4a38      	ldr	r2, [pc, #224]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80044ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a1 	beq.w	8004600 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044be:	4b34      	ldr	r3, [pc, #208]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d05c      	beq.n	8004584 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d141      	bne.n	8004556 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b31      	ldr	r3, [pc, #196]	@ (8004598 <HAL_RCC_OscConfig+0x478>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fc fc12 	bl	8000d00 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fc fc0e 	bl	8000d00 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e087      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	4b27      	ldr	r3, [pc, #156]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	019b      	lsls	r3, r3, #6
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	3b01      	subs	r3, #1
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	491b      	ldr	r1, [pc, #108]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004524:	4313      	orrs	r3, r2
 8004526:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004528:	4b1b      	ldr	r3, [pc, #108]	@ (8004598 <HAL_RCC_OscConfig+0x478>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452e:	f7fc fbe7 	bl	8000d00 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004536:	f7fc fbe3 	bl	8000d00 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e05c      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004548:	4b11      	ldr	r3, [pc, #68]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x416>
 8004554:	e054      	b.n	8004600 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004556:	4b10      	ldr	r3, [pc, #64]	@ (8004598 <HAL_RCC_OscConfig+0x478>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fc fbd0 	bl	8000d00 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004564:	f7fc fbcc 	bl	8000d00 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e045      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <HAL_RCC_OscConfig+0x470>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x444>
 8004582:	e03d      	b.n	8004600 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d107      	bne.n	800459c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e038      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
 8004590:	40023800 	.word	0x40023800
 8004594:	40007000 	.word	0x40007000
 8004598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800459c:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <HAL_RCC_OscConfig+0x4ec>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d028      	beq.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d121      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d11a      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d111      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	3b01      	subs	r3, #1
 80045e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800

08004610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0cc      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004624:	4b68      	ldr	r3, [pc, #416]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d90c      	bls.n	800464c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b65      	ldr	r3, [pc, #404]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b63      	ldr	r3, [pc, #396]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0b8      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004664:	4b59      	ldr	r3, [pc, #356]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4a58      	ldr	r2, [pc, #352]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800466e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800467c:	4b53      	ldr	r3, [pc, #332]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4a52      	ldr	r2, [pc, #328]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	494d      	ldr	r1, [pc, #308]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d044      	beq.n	8004730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d107      	bne.n	80046be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	4b47      	ldr	r3, [pc, #284]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d119      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e07f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ce:	4b3f      	ldr	r3, [pc, #252]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e06f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046de:	4b3b      	ldr	r3, [pc, #236]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e067      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ee:	4b37      	ldr	r3, [pc, #220]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4934      	ldr	r1, [pc, #208]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004700:	f7fc fafe 	bl	8000d00 <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	e00a      	b.n	800471e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004708:	f7fc fafa 	bl	8000d00 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e04f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	4b2b      	ldr	r3, [pc, #172]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 020c 	and.w	r2, r3, #12
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	429a      	cmp	r2, r3
 800472e:	d1eb      	bne.n	8004708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004730:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d20c      	bcs.n	8004758 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b20      	ldr	r3, [pc, #128]	@ (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e032      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004764:	4b19      	ldr	r3, [pc, #100]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4916      	ldr	r1, [pc, #88]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004782:	4b12      	ldr	r3, [pc, #72]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	490e      	ldr	r1, [pc, #56]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004796:	f000 f821 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 800479a:	4602      	mov	r2, r0
 800479c:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	490a      	ldr	r1, [pc, #40]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 80047a8:	5ccb      	ldrb	r3, [r1, r3]
 80047aa:	fa22 f303 	lsr.w	r3, r2, r3
 80047ae:	4a09      	ldr	r2, [pc, #36]	@ (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047b2:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fc fa72 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023c00 	.word	0x40023c00
 80047cc:	40023800 	.word	0x40023800
 80047d0:	08008e74 	.word	0x08008e74
 80047d4:	20000000 	.word	0x20000000
 80047d8:	20000004 	.word	0x20000004

080047dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e0:	b094      	sub	sp, #80	@ 0x50
 80047e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047f4:	4b79      	ldr	r3, [pc, #484]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d00d      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x40>
 8004800:	2b08      	cmp	r3, #8
 8004802:	f200 80e1 	bhi.w	80049c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x34>
 800480a:	2b04      	cmp	r3, #4
 800480c:	d003      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0x3a>
 800480e:	e0db      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004810:	4b73      	ldr	r3, [pc, #460]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004812:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004814:	e0db      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004816:	4b73      	ldr	r3, [pc, #460]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004818:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800481a:	e0d8      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800481c:	4b6f      	ldr	r3, [pc, #444]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004824:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004826:	4b6d      	ldr	r3, [pc, #436]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d063      	beq.n	80048fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004832:	4b6a      	ldr	r3, [pc, #424]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	2200      	movs	r2, #0
 800483a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800483c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004844:	633b      	str	r3, [r7, #48]	@ 0x30
 8004846:	2300      	movs	r3, #0
 8004848:	637b      	str	r3, [r7, #52]	@ 0x34
 800484a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800484e:	4622      	mov	r2, r4
 8004850:	462b      	mov	r3, r5
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	0159      	lsls	r1, r3, #5
 800485c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004860:	0150      	lsls	r0, r2, #5
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4621      	mov	r1, r4
 8004868:	1a51      	subs	r1, r2, r1
 800486a:	6139      	str	r1, [r7, #16]
 800486c:	4629      	mov	r1, r5
 800486e:	eb63 0301 	sbc.w	r3, r3, r1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004880:	4659      	mov	r1, fp
 8004882:	018b      	lsls	r3, r1, #6
 8004884:	4651      	mov	r1, sl
 8004886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800488a:	4651      	mov	r1, sl
 800488c:	018a      	lsls	r2, r1, #6
 800488e:	4651      	mov	r1, sl
 8004890:	ebb2 0801 	subs.w	r8, r2, r1
 8004894:	4659      	mov	r1, fp
 8004896:	eb63 0901 	sbc.w	r9, r3, r1
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ae:	4690      	mov	r8, r2
 80048b0:	4699      	mov	r9, r3
 80048b2:	4623      	mov	r3, r4
 80048b4:	eb18 0303 	adds.w	r3, r8, r3
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	462b      	mov	r3, r5
 80048bc:	eb49 0303 	adc.w	r3, r9, r3
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ce:	4629      	mov	r1, r5
 80048d0:	024b      	lsls	r3, r1, #9
 80048d2:	4621      	mov	r1, r4
 80048d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048d8:	4621      	mov	r1, r4
 80048da:	024a      	lsls	r2, r1, #9
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048e2:	2200      	movs	r2, #0
 80048e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048ec:	f7fb fc70 	bl	80001d0 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4613      	mov	r3, r2
 80048f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f8:	e058      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fa:	4b38      	ldr	r3, [pc, #224]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	099b      	lsrs	r3, r3, #6
 8004900:	2200      	movs	r2, #0
 8004902:	4618      	mov	r0, r3
 8004904:	4611      	mov	r1, r2
 8004906:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004910:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	f04f 0000 	mov.w	r0, #0
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	0159      	lsls	r1, r3, #5
 8004922:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004926:	0150      	lsls	r0, r2, #5
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4641      	mov	r1, r8
 800492e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004932:	4649      	mov	r1, r9
 8004934:	eb63 0b01 	sbc.w	fp, r3, r1
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004944:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004948:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800494c:	ebb2 040a 	subs.w	r4, r2, sl
 8004950:	eb63 050b 	sbc.w	r5, r3, fp
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	00eb      	lsls	r3, r5, #3
 800495e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004962:	00e2      	lsls	r2, r4, #3
 8004964:	4614      	mov	r4, r2
 8004966:	461d      	mov	r5, r3
 8004968:	4643      	mov	r3, r8
 800496a:	18e3      	adds	r3, r4, r3
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	464b      	mov	r3, r9
 8004970:	eb45 0303 	adc.w	r3, r5, r3
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004982:	4629      	mov	r1, r5
 8004984:	028b      	lsls	r3, r1, #10
 8004986:	4621      	mov	r1, r4
 8004988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800498c:	4621      	mov	r1, r4
 800498e:	028a      	lsls	r2, r1, #10
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004996:	2200      	movs	r2, #0
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	61fa      	str	r2, [r7, #28]
 800499c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a0:	f7fb fc16 	bl	80001d0 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4613      	mov	r3, r2
 80049aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049ac:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	3301      	adds	r3, #1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80049bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049c6:	e002      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80049ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3750      	adds	r7, #80	@ 0x50
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
 80049e0:	00f42400 	.word	0x00f42400
 80049e4:	007a1200 	.word	0x007a1200

080049e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ec:	4b03      	ldr	r3, [pc, #12]	@ (80049fc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000000 	.word	0x20000000

08004a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a04:	f7ff fff0 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	0a9b      	lsrs	r3, r3, #10
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4903      	ldr	r1, [pc, #12]	@ (8004a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40023800 	.word	0x40023800
 8004a24:	08008e84 	.word	0x08008e84

08004a28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d035      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a50:	4b62      	ldr	r3, [pc, #392]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a56:	f7fc f953 	bl	8000d00 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a5e:	f7fc f94f 	bl	8000d00 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e0b0      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a70:	4b5b      	ldr	r3, [pc, #364]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	019a      	lsls	r2, r3, #6
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	071b      	lsls	r3, r3, #28
 8004a88:	4955      	ldr	r1, [pc, #340]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a90:	4b52      	ldr	r3, [pc, #328]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a96:	f7fc f933 	bl	8000d00 <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a9e:	f7fc f92f 	bl	8000d00 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e090      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8083 	beq.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b44      	ldr	r3, [pc, #272]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	4a43      	ldr	r2, [pc, #268]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ada:	4b41      	ldr	r3, [pc, #260]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a3e      	ldr	r2, [pc, #248]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af2:	f7fc f905 	bl	8000d00 <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afa:	f7fc f901 	bl	8000d00 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e062      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004b0c:	4b35      	ldr	r3, [pc, #212]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b18:	4b31      	ldr	r3, [pc, #196]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b20:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02f      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d028      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b36:	4b2a      	ldr	r3, [pc, #168]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b40:	4b29      	ldr	r3, [pc, #164]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b46:	4b28      	ldr	r3, [pc, #160]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b4c:	4a24      	ldr	r2, [pc, #144]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b52:	4b23      	ldr	r3, [pc, #140]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d114      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fc f8cf 	bl	8000d00 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fc f8cb 	bl	8000d00 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e02a      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	4b18      	ldr	r3, [pc, #96]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ee      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b94:	d10d      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b96:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004baa:	490d      	ldr	r1, [pc, #52]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]
 8004bb0:	e005      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004bbc:	6093      	str	r3, [r2, #8]
 8004bbe:	4b08      	ldr	r3, [pc, #32]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bca:	4905      	ldr	r1, [pc, #20]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	42470068 	.word	0x42470068
 8004be0:	40023800 	.word	0x40023800
 8004be4:	40007000 	.word	0x40007000
 8004be8:	42470e40 	.word	0x42470e40

08004bec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d13f      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c0a:	4b24      	ldr	r3, [pc, #144]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c12:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d006      	beq.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c20:	d12f      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c22:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c24:	617b      	str	r3, [r7, #20]
          break;
 8004c26:	e02f      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c28:	4b1c      	ldr	r3, [pc, #112]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c34:	d108      	bne.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c36:	4b19      	ldr	r3, [pc, #100]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c3e:	4a19      	ldr	r2, [pc, #100]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e007      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c48:	4b14      	ldr	r3, [pc, #80]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c50:	4a15      	ldr	r2, [pc, #84]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c58:	4b10      	ldr	r3, [pc, #64]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c72:	0f1b      	lsrs	r3, r3, #28
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7e:	617b      	str	r3, [r7, #20]
          break;
 8004c80:	e002      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
          break;
 8004c86:	bf00      	nop
        }
      }
      break;
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004c8a:	bf00      	nop
    }
  }
  return frequency;
 8004c8c:	697b      	ldr	r3, [r7, #20]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	00bb8000 	.word	0x00bb8000
 8004ca4:	007a1200 	.word	0x007a1200
 8004ca8:	00f42400 	.word	0x00f42400

08004cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e07b      	b.n	8004db6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d108      	bne.n	8004cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cce:	d009      	beq.n	8004ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	61da      	str	r2, [r3, #28]
 8004cd6:	e005      	b.n	8004ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fb ff02 	bl	8000b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d68:	ea42 0103 	orr.w	r1, r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	f003 0104 	and.w	r1, r3, #4
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	f003 0210 	and.w	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004da4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	f107 001c 	add.w	r0, r7, #28
 8004dcc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dd0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d123      	bne.n	8004e20 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d105      	bne.n	8004e14 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f9dc 	bl	80051d2 <USB_CoreReset>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	73fb      	strb	r3, [r7, #15]
 8004e1e:	e01b      	b.n	8004e58 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f9d0 	bl	80051d2 <USB_CoreReset>
 8004e32:	4603      	mov	r3, r0
 8004e34:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e36:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e42:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e4a:	e005      	b.n	8004e58 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e58:	7fbb      	ldrb	r3, [r7, #30]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d10b      	bne.n	8004e76 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f043 0206 	orr.w	r2, r3, #6
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e82:	b004      	add	sp, #16
 8004e84:	4770      	bx	lr

08004e86 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f023 0201 	bic.w	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d115      	bne.n	8004f18 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ef8:	200a      	movs	r0, #10
 8004efa:	f7fb ff0d 	bl	8000d18 <HAL_Delay>
      ms += 10U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	330a      	adds	r3, #10
 8004f02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f956 	bl	80051b6 <USB_GetMode>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d01e      	beq.n	8004f4e <USB_SetCurrentMode+0x84>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f14:	d9f0      	bls.n	8004ef8 <USB_SetCurrentMode+0x2e>
 8004f16:	e01a      	b.n	8004f4e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d115      	bne.n	8004f4a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f2a:	200a      	movs	r0, #10
 8004f2c:	f7fb fef4 	bl	8000d18 <HAL_Delay>
      ms += 10U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	330a      	adds	r3, #10
 8004f34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f93d 	bl	80051b6 <USB_GetMode>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <USB_SetCurrentMode+0x84>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f46:	d9f0      	bls.n	8004f2a <USB_SetCurrentMode+0x60>
 8004f48:	e001      	b.n	8004f4e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e005      	b.n	8004f5a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f52:	d101      	bne.n	8004f58 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f7c:	d901      	bls.n	8004f82 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e01b      	b.n	8004fba <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	daf2      	bge.n	8004f70 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	019b      	lsls	r3, r3, #6
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fa6:	d901      	bls.n	8004fac <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e006      	b.n	8004fba <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d0f0      	beq.n	8004f9a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fde:	d901      	bls.n	8004fe4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e018      	b.n	8005016 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	daf2      	bge.n	8004fd2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2210      	movs	r2, #16
 8004ff4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005002:	d901      	bls.n	8005008 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e006      	b.n	8005016 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b10      	cmp	r3, #16
 8005012:	d0f0      	beq.n	8004ff6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005022:	b480      	push	{r7}
 8005024:	b089      	sub	sp, #36	@ 0x24
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	4611      	mov	r1, r2
 800502e:	461a      	mov	r2, r3
 8005030:	460b      	mov	r3, r1
 8005032:	71fb      	strb	r3, [r7, #7]
 8005034:	4613      	mov	r3, r2
 8005036:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005040:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	d123      	bne.n	8005090 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005048:	88bb      	ldrh	r3, [r7, #4]
 800504a:	3303      	adds	r3, #3
 800504c:	089b      	lsrs	r3, r3, #2
 800504e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	e018      	b.n	8005088 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	031a      	lsls	r2, r3, #12
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	4413      	add	r3, r2
 800505e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005062:	461a      	mov	r2, r3
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6013      	str	r3, [r2, #0]
      pSrc++;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	3301      	adds	r3, #1
 800506e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	3301      	adds	r3, #1
 8005074:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3301      	adds	r3, #1
 800507a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	3301      	adds	r3, #1
 8005080:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	3301      	adds	r3, #1
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	429a      	cmp	r2, r3
 800508e:	d3e2      	bcc.n	8005056 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3724      	adds	r7, #36	@ 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800509e:	b480      	push	{r7}
 80050a0:	b08b      	sub	sp, #44	@ 0x2c
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	623b      	str	r3, [r7, #32]
 80050c8:	e014      	b.n	80050f4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	601a      	str	r2, [r3, #0]
    pDest++;
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	3301      	adds	r3, #1
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	3301      	adds	r3, #1
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	3301      	adds	r3, #1
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	3301      	adds	r3, #1
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	3301      	adds	r3, #1
 80050f2:	623b      	str	r3, [r7, #32]
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d3e6      	bcc.n	80050ca <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050fc:	8bfb      	ldrh	r3, [r7, #30]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01e      	beq.n	8005140 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800510c:	461a      	mov	r2, r3
 800510e:	f107 0310 	add.w	r3, r7, #16
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	fa22 f303 	lsr.w	r3, r2, r3
 8005122:	b2da      	uxtb	r2, r3
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	701a      	strb	r2, [r3, #0]
      i++;
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	3301      	adds	r3, #1
 800512c:	623b      	str	r3, [r7, #32]
      pDest++;
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	3301      	adds	r3, #1
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005134:	8bfb      	ldrh	r3, [r7, #30]
 8005136:	3b01      	subs	r3, #1
 8005138:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800513a:	8bfb      	ldrh	r3, [r7, #30]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1ea      	bne.n	8005116 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005142:	4618      	mov	r0, r3
 8005144:	372c      	adds	r7, #44	@ 0x2c
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4013      	ands	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005166:	68fb      	ldr	r3, [r7, #12]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	4013      	ands	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051a8:	68bb      	ldr	r3, [r7, #8]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0301 	and.w	r3, r3, #1
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3301      	adds	r3, #1
 80051e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051ea:	d901      	bls.n	80051f0 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e01b      	b.n	8005228 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	daf2      	bge.n	80051de <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f043 0201 	orr.w	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005214:	d901      	bls.n	800521a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e006      	b.n	8005228 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d0f0      	beq.n	8005208 <USB_CoreReset+0x36>

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005234:	b084      	sub	sp, #16
 8005236:	b580      	push	{r7, lr}
 8005238:	b086      	sub	sp, #24
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005254:	461a      	mov	r2, r3
 8005256:	2300      	movs	r3, #0
 8005258:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005276:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d119      	bne.n	80052be <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800528a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10a      	bne.n	80052a8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052a0:	f043 0304 	orr.w	r3, r3, #4
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e014      	b.n	80052d2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052b6:	f023 0304 	bic.w	r3, r3, #4
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e009      	b.n	80052d2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052cc:	f023 0304 	bic.w	r3, r3, #4
 80052d0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052d2:	2110      	movs	r1, #16
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff fe44 	bl	8004f62 <USB_FlushTxFifo>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff fe6e 	bl	8004fc6 <USB_FlushRxFifo>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	e015      	b.n	8005326 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005306:	461a      	mov	r2, r3
 8005308:	f04f 33ff 	mov.w	r3, #4294967295
 800530c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800531a:	461a      	mov	r2, r3
 800531c:	2300      	movs	r3, #0
 800531e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	3301      	adds	r3, #1
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800532a:	461a      	mov	r2, r3
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4293      	cmp	r3, r2
 8005330:	d3e3      	bcc.n	80052fa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f04f 32ff 	mov.w	r2, #4294967295
 800533e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a18      	ldr	r2, [pc, #96]	@ (80053a4 <USB_HostInit+0x170>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d10b      	bne.n	8005360 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800534e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a15      	ldr	r2, [pc, #84]	@ (80053a8 <USB_HostInit+0x174>)
 8005354:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a14      	ldr	r2, [pc, #80]	@ (80053ac <USB_HostInit+0x178>)
 800535a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800535e:	e009      	b.n	8005374 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2280      	movs	r2, #128	@ 0x80
 8005364:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a11      	ldr	r2, [pc, #68]	@ (80053b0 <USB_HostInit+0x17c>)
 800536a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a11      	ldr	r2, [pc, #68]	@ (80053b4 <USB_HostInit+0x180>)
 8005370:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005374:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005378:	2b00      	cmp	r3, #0
 800537a:	d105      	bne.n	8005388 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f043 0210 	orr.w	r2, r3, #16
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699a      	ldr	r2, [r3, #24]
 800538c:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <USB_HostInit+0x184>)
 800538e:	4313      	orrs	r3, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a0:	b004      	add	sp, #16
 80053a2:	4770      	bx	lr
 80053a4:	40040000 	.word	0x40040000
 80053a8:	01000200 	.word	0x01000200
 80053ac:	00e00300 	.word	0x00e00300
 80053b0:	00600080 	.word	0x00600080
 80053b4:	004000e0 	.word	0x004000e0
 80053b8:	a3200008 	.word	0xa3200008

080053bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053da:	f023 0303 	bic.w	r3, r3, #3
 80053de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d107      	bne.n	800540e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005404:	461a      	mov	r2, r3
 8005406:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800540a:	6053      	str	r3, [r2, #4]
 800540c:	e00c      	b.n	8005428 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d107      	bne.n	8005424 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800541a:	461a      	mov	r2, r3
 800541c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005420:	6053      	str	r3, [r2, #4]
 8005422:	e001      	b.n	8005428 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005456:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005464:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005466:	2064      	movs	r0, #100	@ 0x64
 8005468:	f7fb fc56 	bl	8000d18 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005478:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800547a:	200a      	movs	r0, #10
 800547c:	f7fb fc4c 	bl	8000d18 <HAL_Delay>

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	460b      	mov	r3, r1
 8005494:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80054ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <USB_DriveVbus+0x44>
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d106      	bne.n	80054ce <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80054c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80054cc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d8:	d109      	bne.n	80054ee <USB_DriveVbus+0x64>
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80054e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054ec:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	0c5b      	lsrs	r3, r3, #17
 800551a:	f003 0303 	and.w	r3, r3, #3
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	b29b      	uxth	r3, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	4608      	mov	r0, r1
 8005556:	4611      	mov	r1, r2
 8005558:	461a      	mov	r2, r3
 800555a:	4603      	mov	r3, r0
 800555c:	70fb      	strb	r3, [r7, #3]
 800555e:	460b      	mov	r3, r1
 8005560:	70bb      	strb	r3, [r7, #2]
 8005562:	4613      	mov	r3, r2
 8005564:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800556e:	78fb      	ldrb	r3, [r7, #3]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800557a:	461a      	mov	r2, r3
 800557c:	f04f 33ff 	mov.w	r3, #4294967295
 8005580:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005582:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005586:	2b03      	cmp	r3, #3
 8005588:	d87c      	bhi.n	8005684 <USB_HC_Init+0x138>
 800558a:	a201      	add	r2, pc, #4	@ (adr r2, 8005590 <USB_HC_Init+0x44>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055a1 	.word	0x080055a1
 8005594:	08005647 	.word	0x08005647
 8005598:	080055a1 	.word	0x080055a1
 800559c:	08005609 	.word	0x08005609
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ac:	461a      	mov	r2, r3
 80055ae:	f240 439d 	movw	r3, #1181	@ 0x49d
 80055b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80055b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	da10      	bge.n	80055de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	78fa      	ldrb	r2, [r7, #3]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055da:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80055dc:	e055      	b.n	800568a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a6f      	ldr	r2, [pc, #444]	@ (80057a0 <USB_HC_Init+0x254>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d151      	bne.n	800568a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005600:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005604:	60d3      	str	r3, [r2, #12]
      break;
 8005606:	e040      	b.n	800568a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4413      	add	r3, r2
 8005610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005614:	461a      	mov	r2, r3
 8005616:	f240 639d 	movw	r3, #1693	@ 0x69d
 800561a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800561c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005620:	2b00      	cmp	r3, #0
 8005622:	da34      	bge.n	800568e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4413      	add	r3, r2
 800562c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	78fa      	ldrb	r2, [r7, #3]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	440a      	add	r2, r1
 800563a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800563e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005642:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005644:	e023      	b.n	800568e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4413      	add	r3, r2
 800564e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005652:	461a      	mov	r2, r3
 8005654:	f240 2325 	movw	r3, #549	@ 0x225
 8005658:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800565a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800565e:	2b00      	cmp	r3, #0
 8005660:	da17      	bge.n	8005692 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4413      	add	r3, r2
 800566a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	440a      	add	r2, r1
 8005678:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800567c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005680:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005682:	e006      	b.n	8005692 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	77fb      	strb	r3, [r7, #31]
      break;
 8005688:	e004      	b.n	8005694 <USB_HC_Init+0x148>
      break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <USB_HC_Init+0x148>
      break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <USB_HC_Init+0x148>
      break;
 8005692:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4413      	add	r3, r2
 800569c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a0:	461a      	mov	r2, r3
 80056a2:	2300      	movs	r3, #0
 80056a4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056c0:	f043 0302 	orr.w	r3, r3, #2
 80056c4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	6939      	ldr	r1, [r7, #16]
 80056dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80056e0:	4313      	orrs	r3, r2
 80056e2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80056f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da03      	bge.n	8005700 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80056f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e001      	b.n	8005704 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fef9 	bl	80054fc <USB_GetHostSpeed>
 800570a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800570c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005710:	2b02      	cmp	r3, #2
 8005712:	d106      	bne.n	8005722 <USB_HC_Init+0x1d6>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d003      	beq.n	8005722 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800571a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	e001      	b.n	8005726 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005726:	787b      	ldrb	r3, [r7, #1]
 8005728:	059b      	lsls	r3, r3, #22
 800572a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800572e:	78bb      	ldrb	r3, [r7, #2]
 8005730:	02db      	lsls	r3, r3, #11
 8005732:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005736:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005738:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800573c:	049b      	lsls	r3, r3, #18
 800573e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005742:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005744:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005746:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800574a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	431a      	orrs	r2, r3
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	440a      	add	r2, r1
 800575c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005760:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005764:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005766:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800576a:	2b03      	cmp	r3, #3
 800576c:	d003      	beq.n	8005776 <USB_HC_Init+0x22a>
 800576e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005772:	2b01      	cmp	r3, #1
 8005774:	d10f      	bne.n	8005796 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4413      	add	r3, r2
 800577e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	78fa      	ldrb	r2, [r7, #3]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	440a      	add	r2, r1
 800578c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005790:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005794:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005796:	7ffb      	ldrb	r3, [r7, #31]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40040000 	.word	0x40040000

080057a4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08c      	sub	sp, #48	@ 0x30
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	4613      	mov	r3, r2
 80057b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	785b      	ldrb	r3, [r3, #1]
 80057ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80057bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057c0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a5d      	ldr	r2, [pc, #372]	@ (800593c <USB_HC_StartXfer+0x198>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d12f      	bne.n	800582a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d11c      	bne.n	800580a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	7c9b      	ldrb	r3, [r3, #18]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <USB_HC_StartXfer+0x3c>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	7c9b      	ldrb	r3, [r3, #18]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d124      	bne.n	800582a <USB_HC_StartXfer+0x86>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	799b      	ldrb	r3, [r3, #6]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d120      	bne.n	800582a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	6a3a      	ldr	r2, [r7, #32]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005806:	60d3      	str	r3, [r2, #12]
 8005808:	e00f      	b.n	800582a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	791b      	ldrb	r3, [r3, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10b      	bne.n	800582a <USB_HC_StartXfer+0x86>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	795b      	ldrb	r3, [r3, #5]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d107      	bne.n	800582a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	4619      	mov	r1, r3
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fb6b 	bl	8005efc <USB_DoPing>
        return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e232      	b.n	8005c90 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	799b      	ldrb	r3, [r3, #6]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d158      	bne.n	80058e4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005832:	2301      	movs	r3, #1
 8005834:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	78db      	ldrb	r3, [r3, #3]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800583e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	8a92      	ldrh	r2, [r2, #20]
 8005844:	fb03 f202 	mul.w	r2, r3, r2
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	61da      	str	r2, [r3, #28]
 800584c:	e07c      	b.n	8005948 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	7c9b      	ldrb	r3, [r3, #18]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d130      	bne.n	80058b8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	2bbc      	cmp	r3, #188	@ 0xbc
 800585c:	d918      	bls.n	8005890 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	8a9b      	ldrh	r3, [r3, #20]
 8005862:	461a      	mov	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d003      	beq.n	8005880 <USB_HC_StartXfer+0xdc>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d103      	bne.n	8005888 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2202      	movs	r2, #2
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	e05f      	b.n	8005948 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2201      	movs	r2, #1
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	e05b      	b.n	8005948 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d007      	beq.n	80058b0 <USB_HC_StartXfer+0x10c>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d003      	beq.n	80058b0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2204      	movs	r2, #4
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	e04b      	b.n	8005948 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2203      	movs	r2, #3
 80058b4:	60da      	str	r2, [r3, #12]
 80058b6:	e047      	b.n	8005948 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d10d      	bne.n	80058da <USB_HC_StartXfer+0x136>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	8a92      	ldrh	r2, [r2, #20]
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d907      	bls.n	80058da <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	8a92      	ldrh	r2, [r2, #20]
 80058d0:	fb03 f202 	mul.w	r2, r3, r2
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61da      	str	r2, [r3, #28]
 80058d8:	e036      	b.n	8005948 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6a1a      	ldr	r2, [r3, #32]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	61da      	str	r2, [r3, #28]
 80058e2:	e031      	b.n	8005948 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d018      	beq.n	800591e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	8a92      	ldrh	r2, [r2, #20]
 80058f4:	4413      	add	r3, r2
 80058f6:	3b01      	subs	r3, #1
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	8a92      	ldrh	r2, [r2, #20]
 80058fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005900:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005902:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005904:	8b7b      	ldrh	r3, [r7, #26]
 8005906:	429a      	cmp	r2, r3
 8005908:	d90b      	bls.n	8005922 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800590a:	8b7b      	ldrh	r3, [r7, #26]
 800590c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800590e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	8a92      	ldrh	r2, [r2, #20]
 8005914:	fb03 f202 	mul.w	r2, r3, r2
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	61da      	str	r2, [r3, #28]
 800591c:	e001      	b.n	8005922 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800591e:	2301      	movs	r3, #1
 8005920:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	78db      	ldrb	r3, [r3, #3]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800592a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	8a92      	ldrh	r2, [r2, #20]
 8005930:	fb03 f202 	mul.w	r2, r3, r2
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	61da      	str	r2, [r3, #28]
 8005938:	e006      	b.n	8005948 <USB_HC_StartXfer+0x1a4>
 800593a:	bf00      	nop
 800593c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005950:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005952:	04d9      	lsls	r1, r3, #19
 8005954:	4ba3      	ldr	r3, [pc, #652]	@ (8005be4 <USB_HC_StartXfer+0x440>)
 8005956:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005958:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	7d9b      	ldrb	r3, [r3, #22]
 800595e:	075b      	lsls	r3, r3, #29
 8005960:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005964:	69f9      	ldr	r1, [r7, #28]
 8005966:	0148      	lsls	r0, r1, #5
 8005968:	6a39      	ldr	r1, [r7, #32]
 800596a:	4401      	add	r1, r0
 800596c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005970:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005972:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6999      	ldr	r1, [r3, #24]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800598a:	460a      	mov	r2, r1
 800598c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	bf0c      	ite	eq
 800599e:	2301      	moveq	r3, #1
 80059a0:	2300      	movne	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	6a3a      	ldr	r2, [r7, #32]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80059c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	7e7b      	ldrb	r3, [r7, #25]
 80059d6:	075b      	lsls	r3, r3, #29
 80059d8:	69f9      	ldr	r1, [r7, #28]
 80059da:	0148      	lsls	r0, r1, #5
 80059dc:	6a39      	ldr	r1, [r7, #32]
 80059de:	4401      	add	r1, r0
 80059e0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80059e4:	4313      	orrs	r3, r2
 80059e6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	799b      	ldrb	r3, [r3, #6]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	f040 80c3 	bne.w	8005b78 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	7c5b      	ldrb	r3, [r3, #17]
 80059f6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80059fc:	4313      	orrs	r3, r2
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	6a3a      	ldr	r2, [r7, #32]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005a0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a0e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	6a3a      	ldr	r2, [r7, #32]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a2a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	79db      	ldrb	r3, [r3, #7]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d123      	bne.n	8005a80 <USB_HC_StartXfer+0x2dc>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	78db      	ldrb	r3, [r3, #3]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d11f      	bne.n	8005a80 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	6a3a      	ldr	r2, [r7, #32]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a5e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	6a3a      	ldr	r2, [r7, #32]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a7e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	7c9b      	ldrb	r3, [r3, #18]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d003      	beq.n	8005a90 <USB_HC_StartXfer+0x2ec>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	7c9b      	ldrb	r3, [r3, #18]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d117      	bne.n	8005ac0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d113      	bne.n	8005ac0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	78db      	ldrb	r3, [r3, #3]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10f      	bne.n	8005ac0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	6a3a      	ldr	r2, [r7, #32]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005abe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	7c9b      	ldrb	r3, [r3, #18]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d162      	bne.n	8005b8e <USB_HC_StartXfer+0x3ea>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	78db      	ldrb	r3, [r3, #3]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d15e      	bne.n	8005b8e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d858      	bhi.n	8005b8c <USB_HC_StartXfer+0x3e8>
 8005ada:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <USB_HC_StartXfer+0x33c>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005af1 	.word	0x08005af1
 8005ae4:	08005b13 	.word	0x08005b13
 8005ae8:	08005b35 	.word	0x08005b35
 8005aec:	08005b57 	.word	0x08005b57
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b0e:	6053      	str	r3, [r2, #4]
          break;
 8005b10:	e03d      	b.n	8005b8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	6a3a      	ldr	r2, [r7, #32]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b2c:	f043 030e 	orr.w	r3, r3, #14
 8005b30:	6053      	str	r3, [r2, #4]
          break;
 8005b32:	e02c      	b.n	8005b8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	6a3a      	ldr	r2, [r7, #32]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b52:	6053      	str	r3, [r2, #4]
          break;
 8005b54:	e01b      	b.n	8005b8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	6a3a      	ldr	r2, [r7, #32]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b74:	6053      	str	r3, [r2, #4]
          break;
 8005b76:	e00a      	b.n	8005b8e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b84:	461a      	mov	r2, r3
 8005b86:	2300      	movs	r3, #0
 8005b88:	6053      	str	r3, [r2, #4]
 8005b8a:	e000      	b.n	8005b8e <USB_HC_StartXfer+0x3ea>
          break;
 8005b8c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ba4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	78db      	ldrb	r3, [r3, #3]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d004      	beq.n	8005bb8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	e003      	b.n	8005bc0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005bbe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bc6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e055      	b.n	8005c90 <USB_HC_StartXfer+0x4ec>
 8005be4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	78db      	ldrb	r3, [r3, #3]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d14e      	bne.n	8005c8e <USB_HC_StartXfer+0x4ea>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d04a      	beq.n	8005c8e <USB_HC_StartXfer+0x4ea>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	79db      	ldrb	r3, [r3, #7]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d146      	bne.n	8005c8e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	7c9b      	ldrb	r3, [r3, #18]
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d831      	bhi.n	8005c6c <USB_HC_StartXfer+0x4c8>
 8005c08:	a201      	add	r2, pc, #4	@ (adr r2, 8005c10 <USB_HC_StartXfer+0x46c>)
 8005c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0e:	bf00      	nop
 8005c10:	08005c21 	.word	0x08005c21
 8005c14:	08005c45 	.word	0x08005c45
 8005c18:	08005c21 	.word	0x08005c21
 8005c1c:	08005c45 	.word	0x08005c45
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	3303      	adds	r3, #3
 8005c26:	089b      	lsrs	r3, r3, #2
 8005c28:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c2a:	8afa      	ldrh	r2, [r7, #22]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d91c      	bls.n	8005c70 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f043 0220 	orr.w	r2, r3, #32
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c42:	e015      	b.n	8005c70 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	3303      	adds	r3, #3
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c4e:	8afa      	ldrh	r2, [r7, #22]
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d90a      	bls.n	8005c74 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c6a:	e003      	b.n	8005c74 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005c6c:	bf00      	nop
 8005c6e:	e002      	b.n	8005c76 <USB_HC_StartXfer+0x4d2>
        break;
 8005c70:	bf00      	nop
 8005c72:	e000      	b.n	8005c76 <USB_HC_StartXfer+0x4d2>
        break;
 8005c74:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6999      	ldr	r1, [r3, #24]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	785a      	ldrb	r2, [r3, #1]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2000      	movs	r0, #0
 8005c86:	9000      	str	r0, [sp, #0]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff f9ca 	bl	8005022 <USB_WritePacket>
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3728      	adds	r7, #40	@ 0x28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	b29b      	uxth	r3, r3
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b089      	sub	sp, #36	@ 0x24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	0c9b      	lsrs	r3, r3, #18
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	0fdb      	lsrs	r3, r3, #31
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	0fdb      	lsrs	r3, r3, #31
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d10d      	bne.n	8005d3c <USB_HC_Halt+0x82>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10a      	bne.n	8005d3c <USB_HC_Halt+0x82>
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d002      	beq.n	8005d38 <USB_HC_Halt+0x7e>
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d101      	bne.n	8005d3c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e0d8      	b.n	8005eee <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <USB_HC_Halt+0x8e>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d173      	bne.n	8005e30 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d66:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d14a      	bne.n	8005e0a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d133      	bne.n	8005de8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d9e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005dbe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dcc:	d82e      	bhi.n	8005e2c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005de0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005de4:	d0ec      	beq.n	8005dc0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005de6:	e081      	b.n	8005eec <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e06:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e08:	e070      	b.n	8005eec <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e28:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e2a:	e05f      	b.n	8005eec <USB_HC_Halt+0x232>
            break;
 8005e2c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e2e:	e05d      	b.n	8005eec <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	0151      	lsls	r1, r2, #5
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	440a      	add	r2, r1
 8005e46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e4e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d133      	bne.n	8005ec8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e9e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005eac:	d81d      	bhi.n	8005eea <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ec4:	d0ec      	beq.n	8005ea0 <USB_HC_Halt+0x1e6>
 8005ec6:	e011      	b.n	8005eec <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ee2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	e000      	b.n	8005eec <USB_HC_Halt+0x232>
          break;
 8005eea:	bf00      	nop
    }
  }

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3724      	adds	r7, #36	@ 0x24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005f10:	2301      	movs	r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	04da      	lsls	r2, r3, #19
 8005f18:	4b15      	ldr	r3, [pc, #84]	@ (8005f70 <USB_DoPing+0x74>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f2c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f44:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f4c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	1ff80000 	.word	0x1ff80000

08005f74 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7fe ff8d 	bl	8004ea8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f8e:	2110      	movs	r1, #16
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fe ffe6 	bl	8004f62 <USB_FlushTxFifo>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff f810 	bl	8004fc6 <USB_FlushRxFifo>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61bb      	str	r3, [r7, #24]
 8005fb4:	e01f      	b.n	8005ff6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fcc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fdc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fea:	461a      	mov	r2, r3
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61bb      	str	r3, [r7, #24]
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b0f      	cmp	r3, #15
 8005ffa:	d9dc      	bls.n	8005fb6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61bb      	str	r3, [r7, #24]
 8006000:	e034      	b.n	800606c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006018:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006020:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006028:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	4413      	add	r3, r2
 8006032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006036:	461a      	mov	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3301      	adds	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006048:	d80c      	bhi.n	8006064 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	4413      	add	r3, r2
 8006052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800605c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006060:	d0ec      	beq.n	800603c <USB_StopHost+0xc8>
 8006062:	e000      	b.n	8006066 <USB_StopHost+0xf2>
        break;
 8006064:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	3301      	adds	r3, #1
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	d9c7      	bls.n	8006002 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006078:	461a      	mov	r2, r3
 800607a:	f04f 33ff 	mov.w	r3, #4294967295
 800607e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f04f 32ff 	mov.w	r2, #4294967295
 8006086:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7fe fefc 	bl	8004e86 <USB_EnableGlobalInt>

  return ret;
 800608e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b089      	sub	sp, #36	@ 0x24
 800609c:	af04      	add	r7, sp, #16
 800609e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80060a0:	2301      	movs	r3, #1
 80060a2:	2202      	movs	r2, #2
 80060a4:	2102      	movs	r1, #2
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fc85 	bl	80069b6 <USBH_FindInterface>
 80060ac:	4603      	mov	r3, r0
 80060ae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2bff      	cmp	r3, #255	@ 0xff
 80060b4:	d002      	beq.n	80060bc <USBH_CDC_InterfaceInit+0x24>
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d901      	bls.n	80060c0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060bc:	2302      	movs	r3, #2
 80060be:	e13d      	b.n	800633c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fc5a 	bl	800697e <USBH_SelectInterface>
 80060ca:	4603      	mov	r3, r0
 80060cc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80060ce:	7bbb      	ldrb	r3, [r7, #14]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80060d4:	2302      	movs	r3, #2
 80060d6:	e131      	b.n	800633c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80060de:	2050      	movs	r0, #80	@ 0x50
 80060e0:	f002 fd66 	bl	8008bb0 <malloc>
 80060e4:	4603      	mov	r3, r0
 80060e6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80060f8:	2302      	movs	r3, #2
 80060fa:	e11f      	b.n	800633c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80060fc:	2250      	movs	r2, #80	@ 0x50
 80060fe:	2100      	movs	r1, #0
 8006100:	68b8      	ldr	r0, [r7, #8]
 8006102:	f002 fe13 	bl	8008d2c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	211a      	movs	r1, #26
 800610c:	fb01 f303 	mul.w	r3, r1, r3
 8006110:	4413      	add	r3, r2
 8006112:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	b25b      	sxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	da15      	bge.n	800614a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	211a      	movs	r1, #26
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	4413      	add	r3, r2
 800612a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800612e:	781a      	ldrb	r2, [r3, #0]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	211a      	movs	r1, #26
 800613a:	fb01 f303 	mul.w	r3, r1, r3
 800613e:	4413      	add	r3, r2
 8006140:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006144:	881a      	ldrh	r2, [r3, #0]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 ffbe 	bl	80080d2 <USBH_AllocPipe>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	7819      	ldrb	r1, [r3, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	7858      	ldrb	r0, [r3, #1]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	8952      	ldrh	r2, [r2, #10]
 8006176:	9202      	str	r2, [sp, #8]
 8006178:	2203      	movs	r2, #3
 800617a:	9201      	str	r2, [sp, #4]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	4623      	mov	r3, r4
 8006180:	4602      	mov	r2, r0
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 ff76 	bl	8008074 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2200      	movs	r2, #0
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f002 fc87 	bl	8008aa4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006196:	2300      	movs	r3, #0
 8006198:	2200      	movs	r2, #0
 800619a:	210a      	movs	r1, #10
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fc0a 	bl	80069b6 <USBH_FindInterface>
 80061a2:	4603      	mov	r3, r0
 80061a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	2bff      	cmp	r3, #255	@ 0xff
 80061aa:	d002      	beq.n	80061b2 <USBH_CDC_InterfaceInit+0x11a>
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d901      	bls.n	80061b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061b2:	2302      	movs	r3, #2
 80061b4:	e0c2      	b.n	800633c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	211a      	movs	r1, #26
 80061bc:	fb01 f303 	mul.w	r3, r1, r3
 80061c0:	4413      	add	r3, r2
 80061c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	b25b      	sxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	da16      	bge.n	80061fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	211a      	movs	r1, #26
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	4413      	add	r3, r2
 80061da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80061de:	781a      	ldrb	r2, [r3, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	211a      	movs	r1, #26
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	835a      	strh	r2, [r3, #26]
 80061fa:	e015      	b.n	8006228 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	211a      	movs	r1, #26
 8006202:	fb01 f303 	mul.w	r3, r1, r3
 8006206:	4413      	add	r3, r2
 8006208:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800620c:	781a      	ldrb	r2, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	211a      	movs	r1, #26
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	4413      	add	r3, r2
 800621e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006222:	881a      	ldrh	r2, [r3, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	211a      	movs	r1, #26
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	4413      	add	r3, r2
 8006234:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	b25b      	sxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	da16      	bge.n	800626e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	211a      	movs	r1, #26
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	4413      	add	r3, r2
 800624c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006250:	781a      	ldrb	r2, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	211a      	movs	r1, #26
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	4413      	add	r3, r2
 8006262:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006266:	881a      	ldrh	r2, [r3, #0]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	835a      	strh	r2, [r3, #26]
 800626c:	e015      	b.n	800629a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	211a      	movs	r1, #26
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	4413      	add	r3, r2
 800627a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800627e:	781a      	ldrb	r2, [r3, #0]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	211a      	movs	r1, #26
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006294:	881a      	ldrh	r2, [r3, #0]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	7b9b      	ldrb	r3, [r3, #14]
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 ff16 	bl	80080d2 <USBH_AllocPipe>
 80062a6:	4603      	mov	r3, r0
 80062a8:	461a      	mov	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	7bdb      	ldrb	r3, [r3, #15]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 ff0c 	bl	80080d2 <USBH_AllocPipe>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	7b59      	ldrb	r1, [r3, #13]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	7b98      	ldrb	r0, [r3, #14]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	8b12      	ldrh	r2, [r2, #24]
 80062da:	9202      	str	r2, [sp, #8]
 80062dc:	2202      	movs	r2, #2
 80062de:	9201      	str	r2, [sp, #4]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	4623      	mov	r3, r4
 80062e4:	4602      	mov	r2, r0
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fec4 	bl	8008074 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	7b19      	ldrb	r1, [r3, #12]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	7bd8      	ldrb	r0, [r3, #15]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	8b52      	ldrh	r2, [r2, #26]
 8006304:	9202      	str	r2, [sp, #8]
 8006306:	2202      	movs	r2, #2
 8006308:	9201      	str	r2, [sp, #4]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	4623      	mov	r3, r4
 800630e:	4602      	mov	r2, r0
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 feaf 	bl	8008074 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	7b5b      	ldrb	r3, [r3, #13]
 8006322:	2200      	movs	r2, #0
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f002 fbbc 	bl	8008aa4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	7b1b      	ldrb	r3, [r3, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f002 fbb5 	bl	8008aa4 <USBH_LL_SetToggle>

  return USBH_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	bd90      	pop	{r4, r7, pc}

08006344 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00e      	beq.n	800637c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 fea4 	bl	80080b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 fecf 	bl	8008114 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	7b1b      	ldrb	r3, [r3, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00e      	beq.n	80063a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	7b1b      	ldrb	r3, [r3, #12]
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fe91 	bl	80080b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	7b1b      	ldrb	r3, [r3, #12]
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 febc 	bl	8008114 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	7b5b      	ldrb	r3, [r3, #13]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00e      	beq.n	80063c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	7b5b      	ldrb	r3, [r3, #13]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 fe7e 	bl	80080b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	7b5b      	ldrb	r3, [r3, #13]
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fea9 	bl	8008114 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	4618      	mov	r0, r3
 80063de:	f002 fbef 	bl	8008bc0 <free>
    phost->pActiveClass->pData = 0U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063e8:	2200      	movs	r2, #0
 80063ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3340      	adds	r3, #64	@ 0x40
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8b1 	bl	8006576 <GetLineCoding>
 8006414:	4603      	mov	r3, r0
 8006416:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d105      	bne.n	800642a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006424:	2102      	movs	r1, #2
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800642a:	7afb      	ldrb	r3, [r7, #11]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006454:	2b04      	cmp	r3, #4
 8006456:	d877      	bhi.n	8006548 <USBH_CDC_Process+0x114>
 8006458:	a201      	add	r2, pc, #4	@ (adr r2, 8006460 <USBH_CDC_Process+0x2c>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	08006475 	.word	0x08006475
 8006464:	0800647b 	.word	0x0800647b
 8006468:	080064ab 	.word	0x080064ab
 800646c:	0800651f 	.word	0x0800651f
 8006470:	0800652d 	.word	0x0800652d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	73fb      	strb	r3, [r7, #15]
      break;
 8006478:	e06d      	b.n	8006556 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f897 	bl	80065b4 <SetLineCoding>
 8006486:	4603      	mov	r3, r0
 8006488:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800648a:	7bbb      	ldrb	r3, [r7, #14]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d104      	bne.n	800649a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006498:	e058      	b.n	800654c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d055      	beq.n	800654c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2204      	movs	r2, #4
 80064a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80064a8:	e050      	b.n	800654c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	3340      	adds	r3, #64	@ 0x40
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f860 	bl	8006576 <GetLineCoding>
 80064b6:	4603      	mov	r3, r0
 80064b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d126      	bne.n	800650e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d2:	791b      	ldrb	r3, [r3, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d13b      	bne.n	8006550 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d133      	bne.n	8006550 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d12b      	bne.n	8006550 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006500:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006502:	429a      	cmp	r2, r3
 8006504:	d124      	bne.n	8006550 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f958 	bl	80067bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800650c:	e020      	b.n	8006550 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d01d      	beq.n	8006550 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2204      	movs	r2, #4
 8006518:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800651c:	e018      	b.n	8006550 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f867 	bl	80065f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f8da 	bl	80066de <CDC_ProcessReception>
      break;
 800652a:	e014      	b.n	8006556 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800652c:	2100      	movs	r1, #0
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 f81a 	bl	8007568 <USBH_ClrFeature>
 8006534:	4603      	mov	r3, r0
 8006536:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006546:	e005      	b.n	8006554 <USBH_CDC_Process+0x120>

    default:
      break;
 8006548:	bf00      	nop
 800654a:	e004      	b.n	8006556 <USBH_CDC_Process+0x122>
      break;
 800654c:	bf00      	nop
 800654e:	e002      	b.n	8006556 <USBH_CDC_Process+0x122>
      break;
 8006550:	bf00      	nop
 8006552:	e000      	b.n	8006556 <USBH_CDC_Process+0x122>
      break;
 8006554:	bf00      	nop

  }

  return status;
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	22a1      	movs	r2, #161	@ 0xa1
 8006584:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2221      	movs	r2, #33	@ 0x21
 800658a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2207      	movs	r2, #7
 800659c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2207      	movs	r2, #7
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 fb14 	bl	8007bd2 <USBH_CtlReq>
 80065aa:	4603      	mov	r3, r0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2221      	movs	r2, #33	@ 0x21
 80065c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2207      	movs	r2, #7
 80065da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2207      	movs	r2, #7
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 faf5 	bl	8007bd2 <USBH_CtlReq>
 80065e8:	4603      	mov	r3, r0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af02      	add	r7, sp, #8
 80065f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006604:	2300      	movs	r3, #0
 8006606:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800660e:	2b01      	cmp	r3, #1
 8006610:	d002      	beq.n	8006618 <CDC_ProcessTransmission+0x26>
 8006612:	2b02      	cmp	r3, #2
 8006614:	d023      	beq.n	800665e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006616:	e05e      	b.n	80066d6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	8b12      	ldrh	r2, [r2, #24]
 8006620:	4293      	cmp	r3, r2
 8006622:	d90b      	bls.n	800663c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	69d9      	ldr	r1, [r3, #28]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8b1a      	ldrh	r2, [r3, #24]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	7b5b      	ldrb	r3, [r3, #13]
 8006630:	2001      	movs	r0, #1
 8006632:	9000      	str	r0, [sp, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fcda 	bl	8007fee <USBH_BulkSendData>
 800663a:	e00b      	b.n	8006654 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	7b5b      	ldrb	r3, [r3, #13]
 800664a:	2001      	movs	r0, #1
 800664c:	9000      	str	r0, [sp, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f001 fccd 	bl	8007fee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800665c:	e03b      	b.n	80066d6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	7b5b      	ldrb	r3, [r3, #13]
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f002 f9f3 	bl	8008a50 <USBH_LL_GetURBState>
 800666a:	4603      	mov	r3, r0
 800666c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800666e:	7afb      	ldrb	r3, [r7, #11]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d128      	bne.n	80066c6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	8b12      	ldrh	r2, [r2, #24]
 800667c:	4293      	cmp	r3, r2
 800667e:	d90e      	bls.n	800669e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	8b12      	ldrh	r2, [r2, #24]
 8006688:	1a9a      	subs	r2, r3, r2
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	8b12      	ldrh	r2, [r2, #24]
 8006696:	441a      	add	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	61da      	str	r2, [r3, #28]
 800669c:	e002      	b.n	80066a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d004      	beq.n	80066b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80066b4:	e00e      	b.n	80066d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f868 	bl	8006794 <USBH_CDC_TransmitCallback>
      break;
 80066c4:	e006      	b.n	80066d4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80066c6:	7afb      	ldrb	r3, [r7, #11]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d103      	bne.n	80066d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80066d4:	bf00      	nop
  }
}
 80066d6:	bf00      	nop
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066f0:	2300      	movs	r3, #0
 80066f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d002      	beq.n	8006704 <CDC_ProcessReception+0x26>
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d00e      	beq.n	8006720 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006702:	e043      	b.n	800678c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	6a19      	ldr	r1, [r3, #32]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	8b5a      	ldrh	r2, [r3, #26]
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	7b1b      	ldrb	r3, [r3, #12]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 fc91 	bl	8008038 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2204      	movs	r2, #4
 800671a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800671e:	e035      	b.n	800678c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	7b1b      	ldrb	r3, [r3, #12]
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f002 f992 	bl	8008a50 <USBH_LL_GetURBState>
 800672c:	4603      	mov	r3, r0
 800672e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006730:	7cfb      	ldrb	r3, [r7, #19]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d129      	bne.n	800678a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	7b1b      	ldrb	r3, [r3, #12]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f002 f8f5 	bl	800892c <USBH_LL_GetLastXferSize>
 8006742:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	429a      	cmp	r2, r3
 800674c:	d016      	beq.n	800677c <CDC_ProcessReception+0x9e>
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	8b5b      	ldrh	r3, [r3, #26]
 8006752:	461a      	mov	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4293      	cmp	r3, r2
 8006758:	d110      	bne.n	800677c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad2      	subs	r2, r2, r3
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	6a1a      	ldr	r2, [r3, #32]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	441a      	add	r2, r3
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2203      	movs	r2, #3
 8006776:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800677a:	e006      	b.n	800678a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f80f 	bl	80067a8 <USBH_CDC_ReceiveCallback>
      break;
 800678a:	bf00      	nop
  }
}
 800678c:	bf00      	nop
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4613      	mov	r3, r2
 80067dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80067e4:	2302      	movs	r3, #2
 80067e6:	e029      	b.n	800683c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	79fa      	ldrb	r2, [r7, #7]
 80067ec:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 f81f 	bl	8006844 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f001 ffc5 	bl	80087c4 <USBH_LL_Init>

  return USBH_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e009      	b.n	800686a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	33e0      	adds	r3, #224	@ 0xe0
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	2200      	movs	r2, #0
 8006862:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3301      	adds	r3, #1
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b0f      	cmp	r3, #15
 800686e:	d9f2      	bls.n	8006856 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	e009      	b.n	800688a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3301      	adds	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006890:	d3f1      	bcc.n	8006876 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2240      	movs	r2, #64	@ 0x40
 80068b6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	331c      	adds	r3, #28
 80068e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f002 fa1f 	bl	8008d2c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80068f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f002 fa16 	bl	8008d2c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006906:	2212      	movs	r2, #18
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f002 fa0e 	bl	8008d2c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006916:	223e      	movs	r2, #62	@ 0x3e
 8006918:	2100      	movs	r1, #0
 800691a:	4618      	mov	r0, r3
 800691c:	f002 fa06 	bl	8008d2c <memset>

  return USBH_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d016      	beq.n	800696c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10e      	bne.n	8006966 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800694e:	1c59      	adds	r1, r3, #1
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	33de      	adds	r3, #222	@ 0xde
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]
 8006964:	e004      	b.n	8006970 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006966:	2302      	movs	r3, #2
 8006968:	73fb      	strb	r3, [r7, #15]
 800696a:	e001      	b.n	8006970 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800696c:	2302      	movs	r3, #2
 800696e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006994:	78fa      	ldrb	r2, [r7, #3]
 8006996:	429a      	cmp	r2, r3
 8006998:	d204      	bcs.n	80069a4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80069a2:	e001      	b.n	80069a8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80069a4:	2302      	movs	r3, #2
 80069a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b087      	sub	sp, #28
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	4608      	mov	r0, r1
 80069c0:	4611      	mov	r1, r2
 80069c2:	461a      	mov	r2, r3
 80069c4:	4603      	mov	r3, r0
 80069c6:	70fb      	strb	r3, [r7, #3]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70bb      	strb	r3, [r7, #2]
 80069cc:	4613      	mov	r3, r2
 80069ce:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80069de:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069e0:	e025      	b.n	8006a2e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	221a      	movs	r2, #26
 80069e6:	fb02 f303 	mul.w	r3, r2, r3
 80069ea:	3308      	adds	r3, #8
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	3302      	adds	r3, #2
 80069f2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	795b      	ldrb	r3, [r3, #5]
 80069f8:	78fa      	ldrb	r2, [r7, #3]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d002      	beq.n	8006a04 <USBH_FindInterface+0x4e>
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	2bff      	cmp	r3, #255	@ 0xff
 8006a02:	d111      	bne.n	8006a28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a08:	78ba      	ldrb	r2, [r7, #2]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d002      	beq.n	8006a14 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a0e:	78bb      	ldrb	r3, [r7, #2]
 8006a10:	2bff      	cmp	r3, #255	@ 0xff
 8006a12:	d109      	bne.n	8006a28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a18:	787a      	ldrb	r2, [r7, #1]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d002      	beq.n	8006a24 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a1e:	787b      	ldrb	r3, [r7, #1]
 8006a20:	2bff      	cmp	r3, #255	@ 0xff
 8006a22:	d101      	bne.n	8006a28 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	e006      	b.n	8006a36 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d9d6      	bls.n	80069e2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a34:	23ff      	movs	r3, #255	@ 0xff
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 fef6 	bl	800883c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006a50:	2101      	movs	r1, #1
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f002 f80f 	bl	8008a76 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af04      	add	r7, sp, #16
 8006a6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d102      	bne.n	8006a86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2203      	movs	r2, #3
 8006a84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b0b      	cmp	r3, #11
 8006a8e:	f200 81bb 	bhi.w	8006e08 <USBH_Process+0x3a4>
 8006a92:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <USBH_Process+0x34>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006ac9 	.word	0x08006ac9
 8006a9c:	08006afb 	.word	0x08006afb
 8006aa0:	08006b63 	.word	0x08006b63
 8006aa4:	08006da3 	.word	0x08006da3
 8006aa8:	08006e09 	.word	0x08006e09
 8006aac:	08006c03 	.word	0x08006c03
 8006ab0:	08006d49 	.word	0x08006d49
 8006ab4:	08006c39 	.word	0x08006c39
 8006ab8:	08006c59 	.word	0x08006c59
 8006abc:	08006c77 	.word	0x08006c77
 8006ac0:	08006cbb 	.word	0x08006cbb
 8006ac4:	08006d8b 	.word	0x08006d8b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 819b 	beq.w	8006e0c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006adc:	20c8      	movs	r0, #200	@ 0xc8
 8006ade:	f002 f814 	bl	8008b0a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 ff07 	bl	80088f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006af8:	e188      	b.n	8006e0c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d107      	bne.n	8006b14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b12:	e18a      	b.n	8006e2a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006b1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b1e:	d914      	bls.n	8006b4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006b26:	3301      	adds	r3, #1
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d903      	bls.n	8006b42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	220d      	movs	r2, #13
 8006b3e:	701a      	strb	r2, [r3, #0]
      break;
 8006b40:	e173      	b.n	8006e2a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	701a      	strb	r2, [r3, #0]
      break;
 8006b48:	e16f      	b.n	8006e2a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006b50:	f103 020a 	add.w	r2, r3, #10
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006b5a:	200a      	movs	r0, #10
 8006b5c:	f001 ffd5 	bl	8008b0a <USBH_Delay>
      break;
 8006b60:	e163      	b.n	8006e2a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006b72:	2104      	movs	r1, #4
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006b78:	2064      	movs	r0, #100	@ 0x64
 8006b7a:	f001 ffc6 	bl	8008b0a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fe92 	bl	80088a8 <USBH_LL_GetSpeed>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2205      	movs	r2, #5
 8006b92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b94:	2100      	movs	r1, #0
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fa9b 	bl	80080d2 <USBH_AllocPipe>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006ba4:	2180      	movs	r1, #128	@ 0x80
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fa93 	bl	80080d2 <USBH_AllocPipe>
 8006bac:	4603      	mov	r3, r0
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	7919      	ldrb	r1, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006bc8:	9202      	str	r2, [sp, #8]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	9201      	str	r2, [sp, #4]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2280      	movs	r2, #128	@ 0x80
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 fa4d 	bl	8008074 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	7959      	ldrb	r1, [r3, #5]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bee:	9202      	str	r2, [sp, #8]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	9201      	str	r2, [sp, #4]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fa3a 	bl	8008074 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c00:	e113      	b.n	8006e2a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f916 	bl	8006e34 <USBH_HandleEnum>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 80fd 	bne.w	8006e10 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d103      	bne.n	8006c30 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c2e:	e0ef      	b.n	8006e10 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2207      	movs	r2, #7
 8006c34:	701a      	strb	r2, [r3, #0]
      break;
 8006c36:	e0eb      	b.n	8006e10 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80e8 	beq.w	8006e14 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2208      	movs	r2, #8
 8006c54:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006c56:	e0dd      	b.n	8006e14 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fc3a 	bl	80074da <USBH_SetCfg>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 80d5 	bne.w	8006e18 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2209      	movs	r2, #9
 8006c72:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c74:	e0d0      	b.n	8006e18 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d016      	beq.n	8006cb2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006c84:	2101      	movs	r1, #1
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fc4a 	bl	8007520 <USBH_SetFeature>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d103      	bne.n	8006ca0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	220a      	movs	r2, #10
 8006c9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c9e:	e0bd      	b.n	8006e1c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	f040 80b9 	bne.w	8006e1c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	220a      	movs	r2, #10
 8006cae:	701a      	strb	r2, [r3, #0]
      break;
 8006cb0:	e0b4      	b.n	8006e1c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	701a      	strb	r2, [r3, #0]
      break;
 8006cb8:	e0b0      	b.n	8006e1c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 80ad 	beq.w	8006e20 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
 8006cd2:	e016      	b.n	8006d02 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006cd4:	7bfa      	ldrb	r2, [r7, #15]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	32de      	adds	r2, #222	@ 0xde
 8006cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cde:	791a      	ldrb	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d108      	bne.n	8006cfc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006cea:	7bfa      	ldrb	r2, [r7, #15]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	32de      	adds	r2, #222	@ 0xde
 8006cf0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006cfa:	e005      	b.n	8006d08 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	73fb      	strb	r3, [r7, #15]
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0e5      	beq.n	8006cd4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d016      	beq.n	8006d40 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d109      	bne.n	8006d38 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2206      	movs	r2, #6
 8006d28:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d30:	2103      	movs	r1, #3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d36:	e073      	b.n	8006e20 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	220d      	movs	r2, #13
 8006d3c:	701a      	strb	r2, [r3, #0]
      break;
 8006d3e:	e06f      	b.n	8006e20 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	220d      	movs	r2, #13
 8006d44:	701a      	strb	r2, [r3, #0]
      break;
 8006d46:	e06b      	b.n	8006e20 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d017      	beq.n	8006d82 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d103      	bne.n	8006d72 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	220b      	movs	r2, #11
 8006d6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d70:	e058      	b.n	8006e24 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d154      	bne.n	8006e24 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	220d      	movs	r2, #13
 8006d7e:	701a      	strb	r2, [r3, #0]
      break;
 8006d80:	e050      	b.n	8006e24 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	220d      	movs	r2, #13
 8006d86:	701a      	strb	r2, [r3, #0]
      break;
 8006d88:	e04c      	b.n	8006e24 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d049      	beq.n	8006e28 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	4798      	blx	r3
      }
      break;
 8006da0:	e042      	b.n	8006e28 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fd4a 	bl	8006844 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dde:	2105      	movs	r1, #5
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d107      	bne.n	8006e00 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff fe22 	bl	8006a42 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dfe:	e014      	b.n	8006e2a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 fd1b 	bl	800883c <USBH_LL_Start>
      break;
 8006e06:	e010      	b.n	8006e2a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006e08:	bf00      	nop
 8006e0a:	e00e      	b.n	8006e2a <USBH_Process+0x3c6>
      break;
 8006e0c:	bf00      	nop
 8006e0e:	e00c      	b.n	8006e2a <USBH_Process+0x3c6>
      break;
 8006e10:	bf00      	nop
 8006e12:	e00a      	b.n	8006e2a <USBH_Process+0x3c6>
    break;
 8006e14:	bf00      	nop
 8006e16:	e008      	b.n	8006e2a <USBH_Process+0x3c6>
      break;
 8006e18:	bf00      	nop
 8006e1a:	e006      	b.n	8006e2a <USBH_Process+0x3c6>
      break;
 8006e1c:	bf00      	nop
 8006e1e:	e004      	b.n	8006e2a <USBH_Process+0x3c6>
      break;
 8006e20:	bf00      	nop
 8006e22:	e002      	b.n	8006e2a <USBH_Process+0x3c6>
      break;
 8006e24:	bf00      	nop
 8006e26:	e000      	b.n	8006e2a <USBH_Process+0x3c6>
      break;
 8006e28:	bf00      	nop
  }
  return USBH_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af04      	add	r7, sp, #16
 8006e3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	2b07      	cmp	r3, #7
 8006e4a:	f200 81bd 	bhi.w	80071c8 <USBH_HandleEnum+0x394>
 8006e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e54 <USBH_HandleEnum+0x20>)
 8006e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e54:	08006e75 	.word	0x08006e75
 8006e58:	08006f2f 	.word	0x08006f2f
 8006e5c:	08006f99 	.word	0x08006f99
 8006e60:	08007023 	.word	0x08007023
 8006e64:	0800708d 	.word	0x0800708d
 8006e68:	080070fd 	.word	0x080070fd
 8006e6c:	08007143 	.word	0x08007143
 8006e70:	08007189 	.word	0x08007189
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006e74:	2108      	movs	r1, #8
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa4c 	bl	8007314 <USBH_Get_DevDesc>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d12e      	bne.n	8006ee4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7919      	ldrb	r1, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006eaa:	9202      	str	r2, [sp, #8]
 8006eac:	2200      	movs	r2, #0
 8006eae:	9201      	str	r2, [sp, #4]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2280      	movs	r2, #128	@ 0x80
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 f8dc 	bl	8008074 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	7959      	ldrb	r1, [r3, #5]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ed0:	9202      	str	r2, [sp, #8]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	9201      	str	r2, [sp, #4]
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2200      	movs	r2, #0
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 f8c9 	bl	8008074 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006ee2:	e173      	b.n	80071cc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	f040 8170 	bne.w	80071cc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d903      	bls.n	8006f0e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	220d      	movs	r2, #13
 8006f0a:	701a      	strb	r2, [r3, #0]
      break;
 8006f0c:	e15e      	b.n	80071cc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	795b      	ldrb	r3, [r3, #5]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 f8fd 	bl	8008114 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	791b      	ldrb	r3, [r3, #4]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 f8f7 	bl	8008114 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	701a      	strb	r2, [r3, #0]
      break;
 8006f2c:	e14e      	b.n	80071cc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006f2e:	2112      	movs	r1, #18
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f9ef 	bl	8007314 <USBH_Get_DevDesc>
 8006f36:	4603      	mov	r3, r0
 8006f38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d103      	bne.n	8006f48 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f46:	e143      	b.n	80071d0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	f040 8140 	bne.w	80071d0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f56:	3301      	adds	r3, #1
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d903      	bls.n	8006f72 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	220d      	movs	r2, #13
 8006f6e:	701a      	strb	r2, [r3, #0]
      break;
 8006f70:	e12e      	b.n	80071d0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	795b      	ldrb	r3, [r3, #5]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 f8cb 	bl	8008114 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	791b      	ldrb	r3, [r3, #4]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 f8c5 	bl	8008114 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	701a      	strb	r2, [r3, #0]
      break;
 8006f96:	e11b      	b.n	80071d0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006f98:	2101      	movs	r1, #1
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa79 	bl	8007492 <USBH_SetAddress>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d130      	bne.n	800700c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006faa:	2002      	movs	r0, #2
 8006fac:	f001 fdad 	bl	8008b0a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2203      	movs	r2, #3
 8006fbc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7919      	ldrb	r1, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006fd2:	9202      	str	r2, [sp, #8]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	9201      	str	r2, [sp, #4]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2280      	movs	r2, #128	@ 0x80
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 f848 	bl	8008074 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	7959      	ldrb	r1, [r3, #5]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ff8:	9202      	str	r2, [sp, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	9201      	str	r2, [sp, #4]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	4603      	mov	r3, r0
 8007002:	2200      	movs	r2, #0
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 f835 	bl	8008074 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800700a:	e0e3      	b.n	80071d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b03      	cmp	r3, #3
 8007010:	f040 80e0 	bne.w	80071d4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	220d      	movs	r2, #13
 8007018:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	705a      	strb	r2, [r3, #1]
      break;
 8007020:	e0d8      	b.n	80071d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007022:	2109      	movs	r1, #9
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f9a1 	bl	800736c <USBH_Get_CfgDesc>
 800702a:	4603      	mov	r3, r0
 800702c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800702e:	7bbb      	ldrb	r3, [r7, #14]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d103      	bne.n	800703c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2204      	movs	r2, #4
 8007038:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800703a:	e0cd      	b.n	80071d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b03      	cmp	r3, #3
 8007040:	f040 80ca 	bne.w	80071d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800704a:	3301      	adds	r3, #1
 800704c:	b2da      	uxtb	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800705a:	2b03      	cmp	r3, #3
 800705c:	d903      	bls.n	8007066 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	220d      	movs	r2, #13
 8007062:	701a      	strb	r2, [r3, #0]
      break;
 8007064:	e0b8      	b.n	80071d8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	795b      	ldrb	r3, [r3, #5]
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 f851 	bl	8008114 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	791b      	ldrb	r3, [r3, #4]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f84b 	bl	8008114 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
      break;
 800708a:	e0a5      	b.n	80071d8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f969 	bl	800736c <USBH_Get_CfgDesc>
 800709a:	4603      	mov	r3, r0
 800709c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d103      	bne.n	80070ac <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2205      	movs	r2, #5
 80070a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070aa:	e097      	b.n	80071dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	f040 8094 	bne.w	80071dc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070ba:	3301      	adds	r3, #1
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d903      	bls.n	80070d6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	220d      	movs	r2, #13
 80070d2:	701a      	strb	r2, [r3, #0]
      break;
 80070d4:	e082      	b.n	80071dc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	795b      	ldrb	r3, [r3, #5]
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f819 	bl	8008114 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	791b      	ldrb	r3, [r3, #4]
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 f813 	bl	8008114 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	701a      	strb	r2, [r3, #0]
      break;
 80070fa:	e06f      	b.n	80071dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007102:	2b00      	cmp	r3, #0
 8007104:	d019      	beq.n	800713a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007112:	23ff      	movs	r3, #255	@ 0xff
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f953 	bl	80073c0 <USBH_Get_StringDesc>
 800711a:	4603      	mov	r3, r0
 800711c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d103      	bne.n	800712c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2206      	movs	r2, #6
 8007128:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800712a:	e059      	b.n	80071e0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b03      	cmp	r3, #3
 8007130:	d156      	bne.n	80071e0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2206      	movs	r2, #6
 8007136:	705a      	strb	r2, [r3, #1]
      break;
 8007138:	e052      	b.n	80071e0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2206      	movs	r2, #6
 800713e:	705a      	strb	r2, [r3, #1]
      break;
 8007140:	e04e      	b.n	80071e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007148:	2b00      	cmp	r3, #0
 800714a:	d019      	beq.n	8007180 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007158:	23ff      	movs	r3, #255	@ 0xff
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f930 	bl	80073c0 <USBH_Get_StringDesc>
 8007160:	4603      	mov	r3, r0
 8007162:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d103      	bne.n	8007172 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2207      	movs	r2, #7
 800716e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007170:	e038      	b.n	80071e4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b03      	cmp	r3, #3
 8007176:	d135      	bne.n	80071e4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2207      	movs	r2, #7
 800717c:	705a      	strb	r2, [r3, #1]
      break;
 800717e:	e031      	b.n	80071e4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2207      	movs	r2, #7
 8007184:	705a      	strb	r2, [r3, #1]
      break;
 8007186:	e02d      	b.n	80071e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800718e:	2b00      	cmp	r3, #0
 8007190:	d017      	beq.n	80071c2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800719e:	23ff      	movs	r3, #255	@ 0xff
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f90d 	bl	80073c0 <USBH_Get_StringDesc>
 80071a6:	4603      	mov	r3, r0
 80071a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80071b4:	e018      	b.n	80071e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d115      	bne.n	80071e8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]
      break;
 80071c0:	e012      	b.n	80071e8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]
      break;
 80071c6:	e00f      	b.n	80071e8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80071c8:	bf00      	nop
 80071ca:	e00e      	b.n	80071ea <USBH_HandleEnum+0x3b6>
      break;
 80071cc:	bf00      	nop
 80071ce:	e00c      	b.n	80071ea <USBH_HandleEnum+0x3b6>
      break;
 80071d0:	bf00      	nop
 80071d2:	e00a      	b.n	80071ea <USBH_HandleEnum+0x3b6>
      break;
 80071d4:	bf00      	nop
 80071d6:	e008      	b.n	80071ea <USBH_HandleEnum+0x3b6>
      break;
 80071d8:	bf00      	nop
 80071da:	e006      	b.n	80071ea <USBH_HandleEnum+0x3b6>
      break;
 80071dc:	bf00      	nop
 80071de:	e004      	b.n	80071ea <USBH_HandleEnum+0x3b6>
      break;
 80071e0:	bf00      	nop
 80071e2:	e002      	b.n	80071ea <USBH_HandleEnum+0x3b6>
      break;
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <USBH_HandleEnum+0x3b6>
      break;
 80071e8:	bf00      	nop
  }
  return Status;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f804 	bl	8007236 <USBH_HandleSof>
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b0b      	cmp	r3, #11
 8007246:	d10a      	bne.n	800725e <USBH_HandleSof+0x28>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
  }
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007276:	bf00      	nop
}
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007292:	bf00      	nop
}
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 fac0 	bl	8008872 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	791b      	ldrb	r3, [r3, #4]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 ff0b 	bl	8008114 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	795b      	ldrb	r3, [r3, #5]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 ff05 	bl	8008114 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af02      	add	r7, sp, #8
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007320:	887b      	ldrh	r3, [r7, #2]
 8007322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007326:	d901      	bls.n	800732c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007328:	2303      	movs	r3, #3
 800732a:	e01b      	b.n	8007364 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007332:	887b      	ldrh	r3, [r7, #2]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	4613      	mov	r3, r2
 8007338:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800733c:	2100      	movs	r1, #0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f872 	bl	8007428 <USBH_GetDescriptor>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007354:	887a      	ldrh	r2, [r7, #2]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f929 	bl	80075b0 <USBH_ParseDevDesc>
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af02      	add	r7, sp, #8
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	331c      	adds	r3, #28
 800737c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800737e:	887b      	ldrh	r3, [r7, #2]
 8007380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007384:	d901      	bls.n	800738a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007386:	2303      	movs	r3, #3
 8007388:	e016      	b.n	80073b8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800738a:	887b      	ldrh	r3, [r7, #2]
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007394:	2100      	movs	r1, #0
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f846 	bl	8007428 <USBH_GetDescriptor>
 800739c:	4603      	mov	r3, r0
 800739e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d107      	bne.n	80073b6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80073a6:	887b      	ldrh	r3, [r7, #2]
 80073a8:	461a      	mov	r2, r3
 80073aa:	68b9      	ldr	r1, [r7, #8]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f9af 	bl	8007710 <USBH_ParseCfgDesc>
 80073b2:	4603      	mov	r3, r0
 80073b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	461a      	mov	r2, r3
 80073cc:	460b      	mov	r3, r1
 80073ce:	72fb      	strb	r3, [r7, #11]
 80073d0:	4613      	mov	r3, r2
 80073d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80073d4:	893b      	ldrh	r3, [r7, #8]
 80073d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073da:	d802      	bhi.n	80073e2 <USBH_Get_StringDesc+0x22>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e01c      	b.n	8007420 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80073ee:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80073f6:	893b      	ldrh	r3, [r7, #8]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	460b      	mov	r3, r1
 80073fc:	2100      	movs	r1, #0
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f812 	bl	8007428 <USBH_GetDescriptor>
 8007404:	4603      	mov	r3, r0
 8007406:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d107      	bne.n	800741e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007414:	893a      	ldrh	r2, [r7, #8]
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fb8d 	bl	8007b38 <USBH_ParseStringDesc>
  }

  return status;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	607b      	str	r3, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	72fb      	strb	r3, [r7, #11]
 8007436:	4613      	mov	r3, r2
 8007438:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	789b      	ldrb	r3, [r3, #2]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d11c      	bne.n	800747c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007448:	b2da      	uxtb	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2206      	movs	r2, #6
 8007452:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	893a      	ldrh	r2, [r7, #8]
 8007458:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800745a:	893b      	ldrh	r3, [r7, #8]
 800745c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007460:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007464:	d104      	bne.n	8007470 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f240 4209 	movw	r2, #1033	@ 0x409
 800746c:	829a      	strh	r2, [r3, #20]
 800746e:	e002      	b.n	8007476 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8b3a      	ldrh	r2, [r7, #24]
 800747a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800747c:	8b3b      	ldrh	r3, [r7, #24]
 800747e:	461a      	mov	r2, r3
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 fba5 	bl	8007bd2 <USBH_CtlReq>
 8007488:	4603      	mov	r3, r0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	789b      	ldrb	r3, [r3, #2]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d10f      	bne.n	80074c6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2205      	movs	r2, #5
 80074b0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80074c6:	2200      	movs	r2, #0
 80074c8:	2100      	movs	r1, #0
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fb81 	bl	8007bd2 <USBH_CtlReq>
 80074d0:	4603      	mov	r3, r0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	789b      	ldrb	r3, [r3, #2]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d10e      	bne.n	800750c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2209      	movs	r2, #9
 80074f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	887a      	ldrh	r2, [r7, #2]
 80074fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800750c:	2200      	movs	r2, #0
 800750e:	2100      	movs	r1, #0
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fb5e 	bl	8007bd2 <USBH_CtlReq>
 8007516:	4603      	mov	r3, r0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	789b      	ldrb	r3, [r3, #2]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d10f      	bne.n	8007554 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2203      	movs	r2, #3
 800753e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	b29a      	uxth	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007554:	2200      	movs	r2, #0
 8007556:	2100      	movs	r1, #0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fb3a 	bl	8007bd2 <USBH_CtlReq>
 800755e:	4603      	mov	r3, r0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	789b      	ldrb	r3, [r3, #2]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d10f      	bne.n	800759c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800759c:	2200      	movs	r2, #0
 800759e:	2100      	movs	r1, #0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fb16 	bl	8007bd2 <USBH_CtlReq>
 80075a6:	4603      	mov	r3, r0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80075c4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80075d0:	2302      	movs	r3, #2
 80075d2:	e094      	b.n	80076fe <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	781a      	ldrb	r2, [r3, #0]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	785a      	ldrb	r2, [r3, #1]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	3302      	adds	r3, #2
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	3303      	adds	r3, #3
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	4313      	orrs	r3, r2
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	791a      	ldrb	r2, [r3, #4]
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	795a      	ldrb	r2, [r3, #5]
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	799a      	ldrb	r2, [r3, #6]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	79da      	ldrb	r2, [r3, #7]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800762e:	2b01      	cmp	r3, #1
 8007630:	d11b      	bne.n	800766a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	79db      	ldrb	r3, [r3, #7]
 8007636:	2b20      	cmp	r3, #32
 8007638:	dc0f      	bgt.n	800765a <USBH_ParseDevDesc+0xaa>
 800763a:	2b08      	cmp	r3, #8
 800763c:	db0f      	blt.n	800765e <USBH_ParseDevDesc+0xae>
 800763e:	3b08      	subs	r3, #8
 8007640:	4a32      	ldr	r2, [pc, #200]	@ (800770c <USBH_ParseDevDesc+0x15c>)
 8007642:	fa22 f303 	lsr.w	r3, r2, r3
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	bf14      	ite	ne
 800764e:	2301      	movne	r3, #1
 8007650:	2300      	moveq	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <USBH_ParseDevDesc+0xb6>
 8007658:	e001      	b.n	800765e <USBH_ParseDevDesc+0xae>
 800765a:	2b40      	cmp	r3, #64	@ 0x40
 800765c:	d003      	beq.n	8007666 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2208      	movs	r2, #8
 8007662:	71da      	strb	r2, [r3, #7]
        break;
 8007664:	e000      	b.n	8007668 <USBH_ParseDevDesc+0xb8>
        break;
 8007666:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007668:	e00e      	b.n	8007688 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007670:	2b02      	cmp	r3, #2
 8007672:	d107      	bne.n	8007684 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	79db      	ldrb	r3, [r3, #7]
 8007678:	2b08      	cmp	r3, #8
 800767a:	d005      	beq.n	8007688 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2208      	movs	r2, #8
 8007680:	71da      	strb	r2, [r3, #7]
 8007682:	e001      	b.n	8007688 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007684:	2303      	movs	r3, #3
 8007686:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	2b08      	cmp	r3, #8
 800768c:	d936      	bls.n	80076fc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3308      	adds	r3, #8
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	3309      	adds	r3, #9
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	021b      	lsls	r3, r3, #8
 800769e:	b29b      	uxth	r3, r3
 80076a0:	4313      	orrs	r3, r2
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	330a      	adds	r3, #10
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	330b      	adds	r3, #11
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	4313      	orrs	r3, r2
 80076bc:	b29a      	uxth	r2, r3
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	330c      	adds	r3, #12
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	330d      	adds	r3, #13
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	4313      	orrs	r3, r2
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	7b9a      	ldrb	r2, [r3, #14]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	7bda      	ldrb	r2, [r3, #15]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	7c1a      	ldrb	r2, [r3, #16]
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	7c5a      	ldrb	r2, [r3, #17]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	371c      	adds	r7, #28
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	01000101 	.word	0x01000101

08007710 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08c      	sub	sp, #48	@ 0x30
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007724:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800773e:	2302      	movs	r3, #2
 8007740:	e0da      	b.n	80078f8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b09      	cmp	r3, #9
 800774c:	d002      	beq.n	8007754 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800774e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007750:	2209      	movs	r2, #9
 8007752:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	781a      	ldrb	r2, [r3, #0]
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	785a      	ldrb	r2, [r3, #1]
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	3302      	adds	r3, #2
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	3303      	adds	r3, #3
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	b29b      	uxth	r3, r3
 8007776:	4313      	orrs	r3, r2
 8007778:	b29b      	uxth	r3, r3
 800777a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800777e:	bf28      	it	cs
 8007780:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007784:	b29a      	uxth	r2, r3
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	791a      	ldrb	r2, [r3, #4]
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	795a      	ldrb	r2, [r3, #5]
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	799a      	ldrb	r2, [r3, #6]
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	79da      	ldrb	r2, [r3, #7]
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	7a1a      	ldrb	r2, [r3, #8]
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80077b2:	88fb      	ldrh	r3, [r7, #6]
 80077b4:	2b09      	cmp	r3, #9
 80077b6:	f240 809d 	bls.w	80078f4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80077ba:	2309      	movs	r3, #9
 80077bc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077c2:	e081      	b.n	80078c8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80077c4:	f107 0316 	add.w	r3, r7, #22
 80077c8:	4619      	mov	r1, r3
 80077ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077cc:	f000 f9e7 	bl	8007b9e <USBH_GetNextDesc>
 80077d0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80077d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d176      	bne.n	80078c8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80077da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b09      	cmp	r3, #9
 80077e0:	d002      	beq.n	80077e8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80077e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e4:	2209      	movs	r2, #9
 80077e6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80077e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077ec:	221a      	movs	r2, #26
 80077ee:	fb02 f303 	mul.w	r3, r2, r3
 80077f2:	3308      	adds	r3, #8
 80077f4:	6a3a      	ldr	r2, [r7, #32]
 80077f6:	4413      	add	r3, r2
 80077f8:	3302      	adds	r3, #2
 80077fa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80077fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077fe:	69f8      	ldr	r0, [r7, #28]
 8007800:	f000 f87e 	bl	8007900 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800780e:	e043      	b.n	8007898 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007810:	f107 0316 	add.w	r3, r7, #22
 8007814:	4619      	mov	r1, r3
 8007816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007818:	f000 f9c1 	bl	8007b9e <USBH_GetNextDesc>
 800781c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800781e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	2b05      	cmp	r3, #5
 8007824:	d138      	bne.n	8007898 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	795b      	ldrb	r3, [r3, #5]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d113      	bne.n	8007856 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007832:	2b02      	cmp	r3, #2
 8007834:	d003      	beq.n	800783e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	799b      	ldrb	r3, [r3, #6]
 800783a:	2b03      	cmp	r3, #3
 800783c:	d10b      	bne.n	8007856 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	79db      	ldrb	r3, [r3, #7]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <USBH_ParseCfgDesc+0x14e>
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b09      	cmp	r3, #9
 800784c:	d007      	beq.n	800785e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800784e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007850:	2209      	movs	r2, #9
 8007852:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007854:	e003      	b.n	800785e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007858:	2207      	movs	r2, #7
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	e000      	b.n	8007860 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800785e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007864:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007868:	3201      	adds	r2, #1
 800786a:	00d2      	lsls	r2, r2, #3
 800786c:	211a      	movs	r1, #26
 800786e:	fb01 f303 	mul.w	r3, r1, r3
 8007872:	4413      	add	r3, r2
 8007874:	3308      	adds	r3, #8
 8007876:	6a3a      	ldr	r2, [r7, #32]
 8007878:	4413      	add	r3, r2
 800787a:	3304      	adds	r3, #4
 800787c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800787e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007880:	69b9      	ldr	r1, [r7, #24]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f870 	bl	8007968 <USBH_ParseEPDesc>
 8007888:	4603      	mov	r3, r0
 800788a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800788e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007892:	3301      	adds	r3, #1
 8007894:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	791b      	ldrb	r3, [r3, #4]
 800789c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d204      	bcs.n	80078ae <USBH_ParseCfgDesc+0x19e>
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	885a      	ldrh	r2, [r3, #2]
 80078a8:	8afb      	ldrh	r3, [r7, #22]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d8b0      	bhi.n	8007810 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	791b      	ldrb	r3, [r3, #4]
 80078b2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d201      	bcs.n	80078be <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e01c      	b.n	80078f8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80078be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078c2:	3301      	adds	r3, #1
 80078c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d805      	bhi.n	80078dc <USBH_ParseCfgDesc+0x1cc>
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	885a      	ldrh	r2, [r3, #2]
 80078d4:	8afb      	ldrh	r3, [r7, #22]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	f63f af74 	bhi.w	80077c4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	791b      	ldrb	r3, [r3, #4]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	bf28      	it	cs
 80078e4:	2302      	movcs	r3, #2
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d201      	bcs.n	80078f4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e001      	b.n	80078f8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80078f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3730      	adds	r7, #48	@ 0x30
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781a      	ldrb	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	785a      	ldrb	r2, [r3, #1]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	789a      	ldrb	r2, [r3, #2]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	78da      	ldrb	r2, [r3, #3]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	3304      	adds	r3, #4
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b02      	cmp	r3, #2
 8007932:	bf28      	it	cs
 8007934:	2302      	movcs	r3, #2
 8007936:	b2da      	uxtb	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	795a      	ldrb	r2, [r3, #5]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	799a      	ldrb	r2, [r3, #6]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	79da      	ldrb	r2, [r3, #7]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	7a1a      	ldrb	r2, [r3, #8]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	721a      	strb	r2, [r3, #8]
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	785a      	ldrb	r2, [r3, #1]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	789a      	ldrb	r2, [r3, #2]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	78da      	ldrb	r2, [r3, #3]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3304      	adds	r3, #4
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3305      	adds	r3, #5
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	4313      	orrs	r3, r2
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	799a      	ldrb	r2, [r3, #6]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	889b      	ldrh	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80079c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ca:	d804      	bhi.n	80079d6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80079d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079d4:	d901      	bls.n	80079da <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80079d6:	2303      	movs	r3, #3
 80079d8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d136      	bne.n	8007a52 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	78db      	ldrb	r3, [r3, #3]
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d108      	bne.n	8007a02 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	889b      	ldrh	r3, [r3, #4]
 80079f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079f8:	f240 8097 	bls.w	8007b2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80079fc:	2303      	movs	r3, #3
 80079fe:	75fb      	strb	r3, [r7, #23]
 8007a00:	e093      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	78db      	ldrb	r3, [r3, #3]
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d107      	bne.n	8007a1e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	889b      	ldrh	r3, [r3, #4]
 8007a12:	2b40      	cmp	r3, #64	@ 0x40
 8007a14:	f240 8089 	bls.w	8007b2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	75fb      	strb	r3, [r7, #23]
 8007a1c:	e085      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	78db      	ldrb	r3, [r3, #3]
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d005      	beq.n	8007a36 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	78db      	ldrb	r3, [r3, #3]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d10a      	bne.n	8007a4c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	799b      	ldrb	r3, [r3, #6]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <USBH_ParseEPDesc+0xde>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	799b      	ldrb	r3, [r3, #6]
 8007a42:	2b10      	cmp	r3, #16
 8007a44:	d970      	bls.n	8007b28 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007a46:	2303      	movs	r3, #3
 8007a48:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a4a:	e06d      	b.n	8007b28 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	75fb      	strb	r3, [r7, #23]
 8007a50:	e06b      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d13c      	bne.n	8007ad6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	78db      	ldrb	r3, [r3, #3]
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d005      	beq.n	8007a74 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	78db      	ldrb	r3, [r3, #3]
 8007a6c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	889b      	ldrh	r3, [r3, #4]
 8007a78:	2b40      	cmp	r3, #64	@ 0x40
 8007a7a:	d956      	bls.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007a80:	e053      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	78db      	ldrb	r3, [r3, #3]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d10e      	bne.n	8007aac <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	799b      	ldrb	r3, [r3, #6]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007a9a:	2b10      	cmp	r3, #16
 8007a9c:	d803      	bhi.n	8007aa6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007aa2:	2b40      	cmp	r3, #64	@ 0x40
 8007aa4:	d941      	bls.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	75fb      	strb	r3, [r7, #23]
 8007aaa:	e03e      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	78db      	ldrb	r3, [r3, #3]
 8007ab0:	f003 0303 	and.w	r3, r3, #3
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	d10b      	bne.n	8007ad0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	799b      	ldrb	r3, [r3, #6]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <USBH_ParseEPDesc+0x162>
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	889b      	ldrh	r3, [r3, #4]
 8007ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ac8:	d32f      	bcc.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007aca:	2303      	movs	r3, #3
 8007acc:	75fb      	strb	r3, [r7, #23]
 8007ace:	e02c      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	75fb      	strb	r3, [r7, #23]
 8007ad4:	e029      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d120      	bne.n	8007b22 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	78db      	ldrb	r3, [r3, #3]
 8007ae4:	f003 0303 	and.w	r3, r3, #3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	889b      	ldrh	r3, [r3, #4]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d01a      	beq.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007af4:	2303      	movs	r3, #3
 8007af6:	75fb      	strb	r3, [r7, #23]
 8007af8:	e017      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	78db      	ldrb	r3, [r3, #3]
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d10a      	bne.n	8007b1c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	799b      	ldrb	r3, [r3, #6]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <USBH_ParseEPDesc+0x1ae>
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	889b      	ldrh	r3, [r3, #4]
 8007b12:	2b08      	cmp	r3, #8
 8007b14:	d909      	bls.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b16:	2303      	movs	r3, #3
 8007b18:	75fb      	strb	r3, [r7, #23]
 8007b1a:	e006      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	75fb      	strb	r3, [r7, #23]
 8007b20:	e003      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007b22:	2303      	movs	r3, #3
 8007b24:	75fb      	strb	r3, [r7, #23]
 8007b26:	e000      	b.n	8007b2a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b28:	bf00      	nop
  }

  return status;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d120      	bne.n	8007b92 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	1e9a      	subs	r2, r3, #2
 8007b56:	88fb      	ldrh	r3, [r7, #6]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	bf28      	it	cs
 8007b5c:	4613      	movcs	r3, r2
 8007b5e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3302      	adds	r3, #2
 8007b64:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007b66:	2300      	movs	r3, #0
 8007b68:	82fb      	strh	r3, [r7, #22]
 8007b6a:	e00b      	b.n	8007b84 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007b6c:	8afb      	ldrh	r3, [r7, #22]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	4413      	add	r3, r2
 8007b72:	781a      	ldrb	r2, [r3, #0]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007b7e:	8afb      	ldrh	r3, [r7, #22]
 8007b80:	3302      	adds	r3, #2
 8007b82:	82fb      	strh	r3, [r7, #22]
 8007b84:	8afa      	ldrh	r2, [r7, #22]
 8007b86:	8abb      	ldrh	r3, [r7, #20]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d3ef      	bcc.n	8007b6c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
  }
}
 8007b92:	bf00      	nop
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7812      	ldrb	r2, [r2, #0]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b086      	sub	sp, #24
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007be0:	2301      	movs	r3, #1
 8007be2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	789b      	ldrb	r3, [r3, #2]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d002      	beq.n	8007bf2 <USBH_CtlReq+0x20>
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d00f      	beq.n	8007c10 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007bf0:	e027      	b.n	8007c42 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	88fa      	ldrh	r2, [r7, #6]
 8007bfc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2202      	movs	r2, #2
 8007c08:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c0e:	e018      	b.n	8007c42 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f81b 	bl	8007c4c <USBH_HandleControl>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <USBH_CtlReq+0x54>
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d106      	bne.n	8007c34 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	761a      	strb	r2, [r3, #24]
      break;
 8007c32:	e005      	b.n	8007c40 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d102      	bne.n	8007c40 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	709a      	strb	r2, [r3, #2]
      break;
 8007c40:	bf00      	nop
  }
  return status;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c54:	2301      	movs	r3, #1
 8007c56:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	7e1b      	ldrb	r3, [r3, #24]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	2b0a      	cmp	r3, #10
 8007c64:	f200 8156 	bhi.w	8007f14 <USBH_HandleControl+0x2c8>
 8007c68:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <USBH_HandleControl+0x24>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	08007cb7 	.word	0x08007cb7
 8007c78:	08007d21 	.word	0x08007d21
 8007c7c:	08007d47 	.word	0x08007d47
 8007c80:	08007d7f 	.word	0x08007d7f
 8007c84:	08007da9 	.word	0x08007da9
 8007c88:	08007dfb 	.word	0x08007dfb
 8007c8c:	08007e1d 	.word	0x08007e1d
 8007c90:	08007e59 	.word	0x08007e59
 8007c94:	08007e7f 	.word	0x08007e7f
 8007c98:	08007ebd 	.word	0x08007ebd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f103 0110 	add.w	r1, r3, #16
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	795b      	ldrb	r3, [r3, #5]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f943 	bl	8007f34 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	761a      	strb	r2, [r3, #24]
      break;
 8007cb4:	e139      	b.n	8007f2a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	795b      	ldrb	r3, [r3, #5]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fec7 	bl	8008a50 <USBH_LL_GetURBState>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d11e      	bne.n	8007d0a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7c1b      	ldrb	r3, [r3, #16]
 8007cd0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007cd4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	8adb      	ldrh	r3, [r3, #22]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007cde:	7b7b      	ldrb	r3, [r7, #13]
 8007ce0:	2b80      	cmp	r3, #128	@ 0x80
 8007ce2:	d103      	bne.n	8007cec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2203      	movs	r2, #3
 8007ce8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007cea:	e115      	b.n	8007f18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2205      	movs	r2, #5
 8007cf0:	761a      	strb	r2, [r3, #24]
      break;
 8007cf2:	e111      	b.n	8007f18 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007cf4:	7b7b      	ldrb	r3, [r7, #13]
 8007cf6:	2b80      	cmp	r3, #128	@ 0x80
 8007cf8:	d103      	bne.n	8007d02 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2209      	movs	r2, #9
 8007cfe:	761a      	strb	r2, [r3, #24]
      break;
 8007d00:	e10a      	b.n	8007f18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2207      	movs	r2, #7
 8007d06:	761a      	strb	r2, [r3, #24]
      break;
 8007d08:	e106      	b.n	8007f18 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d003      	beq.n	8007d18 <USBH_HandleControl+0xcc>
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	f040 8100 	bne.w	8007f18 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	220b      	movs	r2, #11
 8007d1c:	761a      	strb	r2, [r3, #24]
      break;
 8007d1e:	e0fb      	b.n	8007f18 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6899      	ldr	r1, [r3, #8]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	899a      	ldrh	r2, [r3, #12]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	791b      	ldrb	r3, [r3, #4]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f93a 	bl	8007fb2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2204      	movs	r2, #4
 8007d42:	761a      	strb	r2, [r3, #24]
      break;
 8007d44:	e0f1      	b.n	8007f2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	791b      	ldrb	r3, [r3, #4]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fe7f 	bl	8008a50 <USBH_LL_GetURBState>
 8007d52:	4603      	mov	r3, r0
 8007d54:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d102      	bne.n	8007d62 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2209      	movs	r2, #9
 8007d60:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007d62:	7bbb      	ldrb	r3, [r7, #14]
 8007d64:	2b05      	cmp	r3, #5
 8007d66:	d102      	bne.n	8007d6e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d6c:	e0d6      	b.n	8007f1c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	f040 80d3 	bne.w	8007f1c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	220b      	movs	r2, #11
 8007d7a:	761a      	strb	r2, [r3, #24]
      break;
 8007d7c:	e0ce      	b.n	8007f1c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6899      	ldr	r1, [r3, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	899a      	ldrh	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	795b      	ldrb	r3, [r3, #5]
 8007d8a:	2001      	movs	r0, #1
 8007d8c:	9000      	str	r0, [sp, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f8ea 	bl	8007f68 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2206      	movs	r2, #6
 8007da4:	761a      	strb	r2, [r3, #24]
      break;
 8007da6:	e0c0      	b.n	8007f2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	795b      	ldrb	r3, [r3, #5]
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fe4e 	bl	8008a50 <USBH_LL_GetURBState>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d103      	bne.n	8007dc6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2207      	movs	r2, #7
 8007dc2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007dc4:	e0ac      	b.n	8007f20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	2b05      	cmp	r3, #5
 8007dca:	d105      	bne.n	8007dd8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	220c      	movs	r2, #12
 8007dd0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd6:	e0a3      	b.n	8007f20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d103      	bne.n	8007de6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2205      	movs	r2, #5
 8007de2:	761a      	strb	r2, [r3, #24]
      break;
 8007de4:	e09c      	b.n	8007f20 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	f040 8099 	bne.w	8007f20 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	220b      	movs	r2, #11
 8007df2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007df4:	2302      	movs	r3, #2
 8007df6:	73fb      	strb	r3, [r7, #15]
      break;
 8007df8:	e092      	b.n	8007f20 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	791b      	ldrb	r3, [r3, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2100      	movs	r1, #0
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f8d5 	bl	8007fb2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2208      	movs	r2, #8
 8007e18:	761a      	strb	r2, [r3, #24]

      break;
 8007e1a:	e086      	b.n	8007f2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	791b      	ldrb	r3, [r3, #4]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fe14 	bl	8008a50 <USBH_LL_GetURBState>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d105      	bne.n	8007e3e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	220d      	movs	r2, #13
 8007e36:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e3c:	e072      	b.n	8007f24 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d103      	bne.n	8007e4c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	220b      	movs	r2, #11
 8007e48:	761a      	strb	r2, [r3, #24]
      break;
 8007e4a:	e06b      	b.n	8007f24 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2b05      	cmp	r3, #5
 8007e50:	d168      	bne.n	8007f24 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007e52:	2303      	movs	r3, #3
 8007e54:	73fb      	strb	r3, [r7, #15]
      break;
 8007e56:	e065      	b.n	8007f24 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	795b      	ldrb	r3, [r3, #5]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	9200      	str	r2, [sp, #0]
 8007e60:	2200      	movs	r2, #0
 8007e62:	2100      	movs	r1, #0
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f87f 	bl	8007f68 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	220a      	movs	r2, #10
 8007e7a:	761a      	strb	r2, [r3, #24]
      break;
 8007e7c:	e055      	b.n	8007f2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	795b      	ldrb	r3, [r3, #5]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fde3 	bl	8008a50 <USBH_LL_GetURBState>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d105      	bne.n	8007ea0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	220d      	movs	r2, #13
 8007e9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e9e:	e043      	b.n	8007f28 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d103      	bne.n	8007eae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2209      	movs	r2, #9
 8007eaa:	761a      	strb	r2, [r3, #24]
      break;
 8007eac:	e03c      	b.n	8007f28 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d139      	bne.n	8007f28 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	220b      	movs	r2, #11
 8007eb8:	761a      	strb	r2, [r3, #24]
      break;
 8007eba:	e035      	b.n	8007f28 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	7e5b      	ldrb	r3, [r3, #25]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	765a      	strb	r2, [r3, #25]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7e5b      	ldrb	r3, [r3, #25]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d806      	bhi.n	8007ede <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007edc:	e025      	b.n	8007f2a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ee4:	2106      	movs	r1, #6
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	795b      	ldrb	r3, [r3, #5]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f90c 	bl	8008114 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	791b      	ldrb	r3, [r3, #4]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f906 	bl	8008114 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	73fb      	strb	r3, [r7, #15]
      break;
 8007f12:	e00a      	b.n	8007f2a <USBH_HandleControl+0x2de>

    default:
      break;
 8007f14:	bf00      	nop
 8007f16:	e008      	b.n	8007f2a <USBH_HandleControl+0x2de>
      break;
 8007f18:	bf00      	nop
 8007f1a:	e006      	b.n	8007f2a <USBH_HandleControl+0x2de>
      break;
 8007f1c:	bf00      	nop
 8007f1e:	e004      	b.n	8007f2a <USBH_HandleControl+0x2de>
      break;
 8007f20:	bf00      	nop
 8007f22:	e002      	b.n	8007f2a <USBH_HandleControl+0x2de>
      break;
 8007f24:	bf00      	nop
 8007f26:	e000      	b.n	8007f2a <USBH_HandleControl+0x2de>
      break;
 8007f28:	bf00      	nop
  }

  return status;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af04      	add	r7, sp, #16
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f42:	79f9      	ldrb	r1, [r7, #7]
 8007f44:	2300      	movs	r3, #0
 8007f46:	9303      	str	r3, [sp, #12]
 8007f48:	2308      	movs	r3, #8
 8007f4a:	9302      	str	r3, [sp, #8]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	2300      	movs	r3, #0
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	2300      	movs	r3, #0
 8007f56:	2200      	movs	r2, #0
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 fd48 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af04      	add	r7, sp, #16
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4611      	mov	r1, r2
 8007f74:	461a      	mov	r2, r3
 8007f76:	460b      	mov	r3, r1
 8007f78:	80fb      	strh	r3, [r7, #6]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f8c:	7979      	ldrb	r1, [r7, #5]
 8007f8e:	7e3b      	ldrb	r3, [r7, #24]
 8007f90:	9303      	str	r3, [sp, #12]
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	9302      	str	r3, [sp, #8]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 fd23 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b088      	sub	sp, #32
 8007fb6:	af04      	add	r7, sp, #16
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	80fb      	strh	r3, [r7, #6]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fc8:	7979      	ldrb	r1, [r7, #5]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9303      	str	r3, [sp, #12]
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	9302      	str	r3, [sp, #8]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2201      	movs	r2, #1
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 fd05 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007fe4:	2300      	movs	r3, #0

}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b088      	sub	sp, #32
 8007ff2:	af04      	add	r7, sp, #16
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	80fb      	strh	r3, [r7, #6]
 8008000:	4613      	mov	r3, r2
 8008002:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008012:	7979      	ldrb	r1, [r7, #5]
 8008014:	7e3b      	ldrb	r3, [r7, #24]
 8008016:	9303      	str	r3, [sp, #12]
 8008018:	88fb      	ldrh	r3, [r7, #6]
 800801a:	9302      	str	r3, [sp, #8]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	2301      	movs	r3, #1
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	2302      	movs	r3, #2
 8008026:	2200      	movs	r2, #0
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 fce0 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af04      	add	r7, sp, #16
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	4611      	mov	r1, r2
 8008044:	461a      	mov	r2, r3
 8008046:	460b      	mov	r3, r1
 8008048:	80fb      	strh	r3, [r7, #6]
 800804a:	4613      	mov	r3, r2
 800804c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800804e:	7979      	ldrb	r1, [r7, #5]
 8008050:	2300      	movs	r3, #0
 8008052:	9303      	str	r3, [sp, #12]
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	9302      	str	r3, [sp, #8]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	2301      	movs	r3, #1
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	2302      	movs	r3, #2
 8008062:	2201      	movs	r2, #1
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 fcc2 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af04      	add	r7, sp, #16
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	4608      	mov	r0, r1
 800807e:	4611      	mov	r1, r2
 8008080:	461a      	mov	r2, r3
 8008082:	4603      	mov	r3, r0
 8008084:	70fb      	strb	r3, [r7, #3]
 8008086:	460b      	mov	r3, r1
 8008088:	70bb      	strb	r3, [r7, #2]
 800808a:	4613      	mov	r3, r2
 800808c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800808e:	7878      	ldrb	r0, [r7, #1]
 8008090:	78ba      	ldrb	r2, [r7, #2]
 8008092:	78f9      	ldrb	r1, [r7, #3]
 8008094:	8b3b      	ldrh	r3, [r7, #24]
 8008096:	9302      	str	r3, [sp, #8]
 8008098:	7d3b      	ldrb	r3, [r7, #20]
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	7c3b      	ldrb	r3, [r7, #16]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	4603      	mov	r3, r0
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fc55 	bl	8008952 <USBH_LL_OpenPipe>

  return USBH_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fc74 	bl	80089b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	460b      	mov	r3, r1
 80080dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f836 	bl	8008150 <USBH_GetFreePipe>
 80080e4:	4603      	mov	r3, r0
 80080e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00a      	beq.n	8008108 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	89fb      	ldrh	r3, [r7, #14]
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	33e0      	adds	r3, #224	@ 0xe0
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008108:	89fb      	ldrh	r3, [r7, #14]
 800810a:	b2db      	uxtb	r3, r3
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	2b0f      	cmp	r3, #15
 8008124:	d80d      	bhi.n	8008142 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008126:	78fb      	ldrb	r3, [r7, #3]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	33e0      	adds	r3, #224	@ 0xe0
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	33e0      	adds	r3, #224	@ 0xe0
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	440b      	add	r3, r1
 8008140:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
 8008160:	e00f      	b.n	8008182 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	33e0      	adds	r3, #224	@ 0xe0
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d102      	bne.n	800817c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	b29b      	uxth	r3, r3
 800817a:	e007      	b.n	800818c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	3301      	adds	r3, #1
 8008180:	73fb      	strb	r3, [r7, #15]
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	2b0f      	cmp	r3, #15
 8008186:	d9ec      	bls.n	8008162 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008188:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	@ 0x28
 800819c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80081a2:	4b7f      	ldr	r3, [pc, #508]	@ (80083a0 <xTaskIncrementTick+0x208>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f040 80ef 	bne.w	800838a <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081ac:	4b7d      	ldr	r3, [pc, #500]	@ (80083a4 <xTaskIncrementTick+0x20c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3301      	adds	r3, #1
 80081b2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80081b4:	4a7b      	ldr	r2, [pc, #492]	@ (80083a4 <xTaskIncrementTick+0x20c>)
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d121      	bne.n	8008204 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80081c0:	4b79      	ldr	r3, [pc, #484]	@ (80083a8 <xTaskIncrementTick+0x210>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00b      	beq.n	80081e2 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <xTaskIncrementTick+0x46>
 80081e2:	4b71      	ldr	r3, [pc, #452]	@ (80083a8 <xTaskIncrementTick+0x210>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	61fb      	str	r3, [r7, #28]
 80081e8:	4b70      	ldr	r3, [pc, #448]	@ (80083ac <xTaskIncrementTick+0x214>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a6e      	ldr	r2, [pc, #440]	@ (80083a8 <xTaskIncrementTick+0x210>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	4a6e      	ldr	r2, [pc, #440]	@ (80083ac <xTaskIncrementTick+0x214>)
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	4b6e      	ldr	r3, [pc, #440]	@ (80083b0 <xTaskIncrementTick+0x218>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3301      	adds	r3, #1
 80081fc:	4a6c      	ldr	r2, [pc, #432]	@ (80083b0 <xTaskIncrementTick+0x218>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	f000 f942 	bl	8008488 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008204:	4b6b      	ldr	r3, [pc, #428]	@ (80083b4 <xTaskIncrementTick+0x21c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6a3a      	ldr	r2, [r7, #32]
 800820a:	429a      	cmp	r2, r3
 800820c:	f0c0 80a8 	bcc.w	8008360 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008210:	4b65      	ldr	r3, [pc, #404]	@ (80083a8 <xTaskIncrementTick+0x210>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d104      	bne.n	8008224 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800821a:	4b66      	ldr	r3, [pc, #408]	@ (80083b4 <xTaskIncrementTick+0x21c>)
 800821c:	f04f 32ff 	mov.w	r2, #4294967295
 8008220:	601a      	str	r2, [r3, #0]
                    break;
 8008222:	e09d      	b.n	8008360 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008224:	4b60      	ldr	r3, [pc, #384]	@ (80083a8 <xTaskIncrementTick+0x210>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8008234:	6a3a      	ldr	r2, [r7, #32]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	429a      	cmp	r2, r3
 800823a:	d203      	bcs.n	8008244 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800823c:	4a5d      	ldr	r2, [pc, #372]	@ (80083b4 <xTaskIncrementTick+0x21c>)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	6013      	str	r3, [r2, #0]
                        break;
 8008242:	e08d      	b.n	8008360 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	613b      	str	r3, [r7, #16]
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	68d2      	ldr	r2, [r2, #12]
 8008252:	609a      	str	r2, [r3, #8]
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	6892      	ldr	r2, [r2, #8]
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	3304      	adds	r3, #4
 8008266:	429a      	cmp	r2, r3
 8008268:	d103      	bne.n	8008272 <xTaskIncrementTick+0xda>
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	605a      	str	r2, [r3, #4]
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	2200      	movs	r2, #0
 8008276:	615a      	str	r2, [r3, #20]
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	1e5a      	subs	r2, r3, #1
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01e      	beq.n	80082c8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	6a12      	ldr	r2, [r2, #32]
 8008298:	609a      	str	r2, [r3, #8]
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	69d2      	ldr	r2, [r2, #28]
 80082a2:	605a      	str	r2, [r3, #4]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	3318      	adds	r3, #24
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d103      	bne.n	80082b8 <xTaskIncrementTick+0x120>
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	6a1a      	ldr	r2, [r3, #32]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	605a      	str	r2, [r3, #4]
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2200      	movs	r2, #0
 80082bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	1e5a      	subs	r2, r3, #1
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082cc:	2201      	movs	r2, #1
 80082ce:	409a      	lsls	r2, r3
 80082d0:	4b39      	ldr	r3, [pc, #228]	@ (80083b8 <xTaskIncrementTick+0x220>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	4a38      	ldr	r2, [pc, #224]	@ (80083b8 <xTaskIncrementTick+0x220>)
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082de:	4937      	ldr	r1, [pc, #220]	@ (80083bc <xTaskIncrementTick+0x224>)
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	3304      	adds	r3, #4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60bb      	str	r3, [r7, #8]
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	609a      	str	r2, [r3, #8]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	60da      	str	r2, [r3, #12]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	3204      	adds	r2, #4
 8008306:	605a      	str	r2, [r3, #4]
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	1d1a      	adds	r2, r3, #4
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	609a      	str	r2, [r3, #8]
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4a27      	ldr	r2, [pc, #156]	@ (80083bc <xTaskIncrementTick+0x224>)
 800831e:	441a      	add	r2, r3
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	615a      	str	r2, [r3, #20]
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008328:	4924      	ldr	r1, [pc, #144]	@ (80083bc <xTaskIncrementTick+0x224>)
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800833a:	1c59      	adds	r1, r3, #1
 800833c:	481f      	ldr	r0, [pc, #124]	@ (80083bc <xTaskIncrementTick+0x224>)
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4403      	add	r3, r0
 8008348:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800834e:	4b1c      	ldr	r3, [pc, #112]	@ (80083c0 <xTaskIncrementTick+0x228>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008354:	429a      	cmp	r2, r3
 8008356:	f67f af5b 	bls.w	8008210 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800835a:	2301      	movs	r3, #1
 800835c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800835e:	e757      	b.n	8008210 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8008360:	4b17      	ldr	r3, [pc, #92]	@ (80083c0 <xTaskIncrementTick+0x228>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008366:	4915      	ldr	r1, [pc, #84]	@ (80083bc <xTaskIncrementTick+0x224>)
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	440b      	add	r3, r1
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d901      	bls.n	800837c <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8008378:	2301      	movs	r3, #1
 800837a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800837c:	4b11      	ldr	r3, [pc, #68]	@ (80083c4 <xTaskIncrementTick+0x22c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d007      	beq.n	8008394 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8008384:	2301      	movs	r3, #1
 8008386:	627b      	str	r3, [r7, #36]	@ 0x24
 8008388:	e004      	b.n	8008394 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800838a:	4b0f      	ldr	r3, [pc, #60]	@ (80083c8 <xTaskIncrementTick+0x230>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3301      	adds	r3, #1
 8008390:	4a0d      	ldr	r2, [pc, #52]	@ (80083c8 <xTaskIncrementTick+0x230>)
 8008392:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008396:	4618      	mov	r0, r3
 8008398:	3728      	adds	r7, #40	@ 0x28
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000218 	.word	0x20000218
 80083a4:	20000200 	.word	0x20000200
 80083a8:	200001f8 	.word	0x200001f8
 80083ac:	200001fc 	.word	0x200001fc
 80083b0:	20000210 	.word	0x20000210
 80083b4:	20000214 	.word	0x20000214
 80083b8:	20000204 	.word	0x20000204
 80083bc:	20000194 	.word	0x20000194
 80083c0:	20000190 	.word	0x20000190
 80083c4:	2000020c 	.word	0x2000020c
 80083c8:	20000208 	.word	0x20000208

080083cc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80083d2:	4b28      	ldr	r3, [pc, #160]	@ (8008474 <vTaskSwitchContext+0xa8>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80083da:	4b27      	ldr	r3, [pc, #156]	@ (8008478 <vTaskSwitchContext+0xac>)
 80083dc:	2201      	movs	r2, #1
 80083de:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80083e0:	e041      	b.n	8008466 <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 80083e2:	4b25      	ldr	r3, [pc, #148]	@ (8008478 <vTaskSwitchContext+0xac>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80083e8:	4b24      	ldr	r3, [pc, #144]	@ (800847c <vTaskSwitchContext+0xb0>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	fab3 f383 	clz	r3, r3
 80083f4:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80083f6:	7afb      	ldrb	r3, [r7, #11]
 80083f8:	f1c3 031f 	rsb	r3, r3, #31
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	4920      	ldr	r1, [pc, #128]	@ (8008480 <vTaskSwitchContext+0xb4>)
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10b      	bne.n	800842a <vTaskSwitchContext+0x5e>
    __asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	607b      	str	r3, [r7, #4]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <vTaskSwitchContext+0x5a>
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4a12      	ldr	r2, [pc, #72]	@ (8008480 <vTaskSwitchContext+0xb4>)
 8008436:	4413      	add	r3, r2
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	605a      	str	r2, [r3, #4]
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	3308      	adds	r3, #8
 800844c:	429a      	cmp	r2, r3
 800844e:	d103      	bne.n	8008458 <vTaskSwitchContext+0x8c>
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	605a      	str	r2, [r3, #4]
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	4a09      	ldr	r2, [pc, #36]	@ (8008484 <vTaskSwitchContext+0xb8>)
 8008460:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8008462:	4b08      	ldr	r3, [pc, #32]	@ (8008484 <vTaskSwitchContext+0xb8>)
 8008464:	681b      	ldr	r3, [r3, #0]
    }
 8008466:	bf00      	nop
 8008468:	371c      	adds	r7, #28
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20000218 	.word	0x20000218
 8008478:	2000020c 	.word	0x2000020c
 800847c:	20000204 	.word	0x20000204
 8008480:	20000194 	.word	0x20000194
 8008484:	20000190 	.word	0x20000190

08008488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800848c:	4b0a      	ldr	r3, [pc, #40]	@ (80084b8 <prvResetNextTaskUnblockTime+0x30>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d104      	bne.n	80084a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008496:	4b09      	ldr	r3, [pc, #36]	@ (80084bc <prvResetNextTaskUnblockTime+0x34>)
 8008498:	f04f 32ff 	mov.w	r2, #4294967295
 800849c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800849e:	e005      	b.n	80084ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084a0:	4b05      	ldr	r3, [pc, #20]	@ (80084b8 <prvResetNextTaskUnblockTime+0x30>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a04      	ldr	r2, [pc, #16]	@ (80084bc <prvResetNextTaskUnblockTime+0x34>)
 80084aa:	6013      	str	r3, [r2, #0]
}
 80084ac:	bf00      	nop
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	200001f8 	.word	0x200001f8
 80084bc:	20000214 	.word	0x20000214

080084c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80084c0:	4b07      	ldr	r3, [pc, #28]	@ (80084e0 <pxCurrentTCBConst2>)
 80084c2:	6819      	ldr	r1, [r3, #0]
 80084c4:	6808      	ldr	r0, [r1, #0]
 80084c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ca:	f380 8809 	msr	PSP, r0
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f04f 0000 	mov.w	r0, #0
 80084d6:	f380 8811 	msr	BASEPRI, r0
 80084da:	4770      	bx	lr
 80084dc:	f3af 8000 	nop.w

080084e0 <pxCurrentTCBConst2>:
 80084e0:	20000190 	.word	0x20000190
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop
	...

080084f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80084f0:	f3ef 8009 	mrs	r0, PSP
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	4b15      	ldr	r3, [pc, #84]	@ (8008550 <pxCurrentTCBConst>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	f01e 0f10 	tst.w	lr, #16
 8008500:	bf08      	it	eq
 8008502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	6010      	str	r0, [r2, #0]
 800850c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008514:	f380 8811 	msr	BASEPRI, r0
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f7ff ff54 	bl	80083cc <vTaskSwitchContext>
 8008524:	f04f 0000 	mov.w	r0, #0
 8008528:	f380 8811 	msr	BASEPRI, r0
 800852c:	bc09      	pop	{r0, r3}
 800852e:	6819      	ldr	r1, [r3, #0]
 8008530:	6808      	ldr	r0, [r1, #0]
 8008532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008536:	f01e 0f10 	tst.w	lr, #16
 800853a:	bf08      	it	eq
 800853c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008540:	f380 8809 	msr	PSP, r0
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	f3af 8000 	nop.w

08008550 <pxCurrentTCBConst>:
 8008550:	20000190 	.word	0x20000190
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008554:	bf00      	nop
 8008556:	bf00      	nop

08008558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
    __asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	607b      	str	r3, [r7, #4]
}
 8008570:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008572:	f7ff fe11 	bl	8008198 <xTaskIncrementTick>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800857c:	4b06      	ldr	r3, [pc, #24]	@ (8008598 <SysTick_Handler+0x40>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	2300      	movs	r3, #0
 8008586:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800858e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085a0:	2201      	movs	r2, #1
 80085a2:	490e      	ldr	r1, [pc, #56]	@ (80085dc <MX_USB_HOST_Init+0x40>)
 80085a4:	480e      	ldr	r0, [pc, #56]	@ (80085e0 <MX_USB_HOST_Init+0x44>)
 80085a6:	f7fe f913 	bl	80067d0 <USBH_Init>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085b0:	f7f8 f9b4 	bl	800091c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085b4:	490b      	ldr	r1, [pc, #44]	@ (80085e4 <MX_USB_HOST_Init+0x48>)
 80085b6:	480a      	ldr	r0, [pc, #40]	@ (80085e0 <MX_USB_HOST_Init+0x44>)
 80085b8:	f7fe f9b7 	bl	800692a <USBH_RegisterClass>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80085c2:	f7f8 f9ab 	bl	800091c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80085c6:	4806      	ldr	r0, [pc, #24]	@ (80085e0 <MX_USB_HOST_Init+0x44>)
 80085c8:	f7fe fa3b 	bl	8006a42 <USBH_Start>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80085d2:	f7f8 f9a3 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80085d6:	bf00      	nop
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	080085fd 	.word	0x080085fd
 80085e0:	2000021c 	.word	0x2000021c
 80085e4:	2000000c 	.word	0x2000000c

080085e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80085ec:	4802      	ldr	r0, [pc, #8]	@ (80085f8 <MX_USB_HOST_Process+0x10>)
 80085ee:	f7fe fa39 	bl	8006a64 <USBH_Process>
}
 80085f2:	bf00      	nop
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	2000021c 	.word	0x2000021c

080085fc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	3b01      	subs	r3, #1
 800860c:	2b04      	cmp	r3, #4
 800860e:	d819      	bhi.n	8008644 <USBH_UserProcess+0x48>
 8008610:	a201      	add	r2, pc, #4	@ (adr r2, 8008618 <USBH_UserProcess+0x1c>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	08008645 	.word	0x08008645
 800861c:	08008635 	.word	0x08008635
 8008620:	08008645 	.word	0x08008645
 8008624:	0800863d 	.word	0x0800863d
 8008628:	0800862d 	.word	0x0800862d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800862c:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <USBH_UserProcess+0x58>)
 800862e:	2203      	movs	r2, #3
 8008630:	701a      	strb	r2, [r3, #0]
  break;
 8008632:	e008      	b.n	8008646 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008634:	4b07      	ldr	r3, [pc, #28]	@ (8008654 <USBH_UserProcess+0x58>)
 8008636:	2202      	movs	r2, #2
 8008638:	701a      	strb	r2, [r3, #0]
  break;
 800863a:	e004      	b.n	8008646 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800863c:	4b05      	ldr	r3, [pc, #20]	@ (8008654 <USBH_UserProcess+0x58>)
 800863e:	2201      	movs	r2, #1
 8008640:	701a      	strb	r2, [r3, #0]
  break;
 8008642:	e000      	b.n	8008646 <USBH_UserProcess+0x4a>

  default:
  break;
 8008644:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	200005f4 	.word	0x200005f4

08008658 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08a      	sub	sp, #40	@ 0x28
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008660:	f107 0314 	add.w	r3, r7, #20
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	605a      	str	r2, [r3, #4]
 800866a:	609a      	str	r2, [r3, #8]
 800866c:	60da      	str	r2, [r3, #12]
 800866e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008678:	d147      	bne.n	800870a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800867a:	2300      	movs	r3, #0
 800867c:	613b      	str	r3, [r7, #16]
 800867e:	4b25      	ldr	r3, [pc, #148]	@ (8008714 <HAL_HCD_MspInit+0xbc>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008682:	4a24      	ldr	r2, [pc, #144]	@ (8008714 <HAL_HCD_MspInit+0xbc>)
 8008684:	f043 0301 	orr.w	r3, r3, #1
 8008688:	6313      	str	r3, [r2, #48]	@ 0x30
 800868a:	4b22      	ldr	r3, [pc, #136]	@ (8008714 <HAL_HCD_MspInit+0xbc>)
 800868c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	613b      	str	r3, [r7, #16]
 8008694:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008696:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800869a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800869c:	2300      	movs	r3, #0
 800869e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086a4:	f107 0314 	add.w	r3, r7, #20
 80086a8:	4619      	mov	r1, r3
 80086aa:	481b      	ldr	r0, [pc, #108]	@ (8008718 <HAL_HCD_MspInit+0xc0>)
 80086ac:	f7f8 fc6a 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086b0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80086b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b6:	2302      	movs	r3, #2
 80086b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086be:	2300      	movs	r3, #0
 80086c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086c2:	230a      	movs	r3, #10
 80086c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086c6:	f107 0314 	add.w	r3, r7, #20
 80086ca:	4619      	mov	r1, r3
 80086cc:	4812      	ldr	r0, [pc, #72]	@ (8008718 <HAL_HCD_MspInit+0xc0>)
 80086ce:	f7f8 fc59 	bl	8000f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086d2:	4b10      	ldr	r3, [pc, #64]	@ (8008714 <HAL_HCD_MspInit+0xbc>)
 80086d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008714 <HAL_HCD_MspInit+0xbc>)
 80086d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008714 <HAL_HCD_MspInit+0xbc>)
 80086e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e6:	4a0b      	ldr	r2, [pc, #44]	@ (8008714 <HAL_HCD_MspInit+0xbc>)
 80086e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80086ee:	4b09      	ldr	r3, [pc, #36]	@ (8008714 <HAL_HCD_MspInit+0xbc>)
 80086f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086fa:	2200      	movs	r2, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	2043      	movs	r0, #67	@ 0x43
 8008700:	f7f8 fc09 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008704:	2043      	movs	r0, #67	@ 0x43
 8008706:	f7f8 fc22 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800870a:	bf00      	nop
 800870c:	3728      	adds	r7, #40	@ 0x28
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	40023800 	.word	0x40023800
 8008718:	40020000 	.word	0x40020000

0800871c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fd71 	bl	8007212 <USBH_LL_IncTimer>
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fda9 	bl	800729e <USBH_LL_Connect>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fdb2 	bl	80072cc <USBH_LL_Disconnect>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
 800877c:	4613      	mov	r3, r2
 800877e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe fd63 	bl	8007266 <USBH_LL_PortEnabled>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe fd63 	bl	8007282 <USBH_LL_PortDisabled>
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d12a      	bne.n	800882c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80087d6:	4a18      	ldr	r2, [pc, #96]	@ (8008838 <USBH_LL_Init+0x74>)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a15      	ldr	r2, [pc, #84]	@ (8008838 <USBH_LL_Init+0x74>)
 80087e2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087e6:	4b14      	ldr	r3, [pc, #80]	@ (8008838 <USBH_LL_Init+0x74>)
 80087e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80087ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80087ee:	4b12      	ldr	r3, [pc, #72]	@ (8008838 <USBH_LL_Init+0x74>)
 80087f0:	2208      	movs	r2, #8
 80087f2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80087f4:	4b10      	ldr	r3, [pc, #64]	@ (8008838 <USBH_LL_Init+0x74>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008838 <USBH_LL_Init+0x74>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008800:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <USBH_LL_Init+0x74>)
 8008802:	2202      	movs	r2, #2
 8008804:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008806:	4b0c      	ldr	r3, [pc, #48]	@ (8008838 <USBH_LL_Init+0x74>)
 8008808:	2200      	movs	r2, #0
 800880a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800880c:	480a      	ldr	r0, [pc, #40]	@ (8008838 <USBH_LL_Init+0x74>)
 800880e:	f7f8 fd6e 	bl	80012ee <HAL_HCD_Init>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008818:	f7f8 f880 	bl	800091c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800881c:	4806      	ldr	r0, [pc, #24]	@ (8008838 <USBH_LL_Init+0x74>)
 800881e:	f7f9 f9cf 	bl	8001bc0 <HAL_HCD_GetCurrentFrame>
 8008822:	4603      	mov	r3, r0
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7fe fce4 	bl	80071f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	200005f8 	.word	0x200005f8

0800883c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008852:	4618      	mov	r0, r3
 8008854:	f7f9 f93c 	bl	8001ad0 <HAL_HCD_Start>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	4618      	mov	r0, r3
 8008860:	f000 f95e 	bl	8008b20 <USBH_Get_USB_Status>
 8008864:	4603      	mov	r3, r0
 8008866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008868:	7bbb      	ldrb	r3, [r7, #14]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008888:	4618      	mov	r0, r3
 800888a:	f7f9 f944 	bl	8001b16 <HAL_HCD_Stop>
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 f943 	bl	8008b20 <USBH_Get_USB_Status>
 800889a:	4603      	mov	r3, r0
 800889c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889e:	7bbb      	ldrb	r3, [r7, #14]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7f9 f98e 	bl	8001bdc <HAL_HCD_GetCurrentSpeed>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d00c      	beq.n	80088e0 <USBH_LL_GetSpeed+0x38>
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d80d      	bhi.n	80088e6 <USBH_LL_GetSpeed+0x3e>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <USBH_LL_GetSpeed+0x2c>
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d003      	beq.n	80088da <USBH_LL_GetSpeed+0x32>
 80088d2:	e008      	b.n	80088e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
    break;
 80088d8:	e008      	b.n	80088ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80088da:	2301      	movs	r3, #1
 80088dc:	73fb      	strb	r3, [r7, #15]
    break;
 80088de:	e005      	b.n	80088ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80088e0:	2302      	movs	r3, #2
 80088e2:	73fb      	strb	r3, [r7, #15]
    break;
 80088e4:	e002      	b.n	80088ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80088e6:	2301      	movs	r3, #1
 80088e8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ea:	bf00      	nop
  }
  return  speed;
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800890c:	4618      	mov	r0, r3
 800890e:	f7f9 f91f 	bl	8001b50 <HAL_HCD_ResetPort>
 8008912:	4603      	mov	r3, r0
 8008914:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f901 	bl	8008b20 <USBH_Get_USB_Status>
 800891e:	4603      	mov	r3, r0
 8008920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008922:	7bbb      	ldrb	r3, [r7, #14]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f7f9 f927 	bl	8001b96 <HAL_HCD_HC_GetXferCount>
 8008948:	4603      	mov	r3, r0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008952:	b590      	push	{r4, r7, lr}
 8008954:	b089      	sub	sp, #36	@ 0x24
 8008956:	af04      	add	r7, sp, #16
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	461a      	mov	r2, r3
 8008960:	4603      	mov	r3, r0
 8008962:	70fb      	strb	r3, [r7, #3]
 8008964:	460b      	mov	r3, r1
 8008966:	70bb      	strb	r3, [r7, #2]
 8008968:	4613      	mov	r3, r2
 800896a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800897a:	787c      	ldrb	r4, [r7, #1]
 800897c:	78ba      	ldrb	r2, [r7, #2]
 800897e:	78f9      	ldrb	r1, [r7, #3]
 8008980:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008982:	9302      	str	r3, [sp, #8]
 8008984:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4623      	mov	r3, r4
 8008992:	f7f8 fd13 	bl	80013bc <HAL_HCD_HC_Init>
 8008996:	4603      	mov	r3, r0
 8008998:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	4618      	mov	r0, r3
 800899e:	f000 f8bf 	bl	8008b20 <USBH_Get_USB_Status>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd90      	pop	{r4, r7, pc}

080089b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	460b      	mov	r3, r1
 80089ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f8 fdac 	bl	800152c <HAL_HCD_HC_Halt>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f8a0 	bl	8008b20 <USBH_Get_USB_Status>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80089ee:	b590      	push	{r4, r7, lr}
 80089f0:	b089      	sub	sp, #36	@ 0x24
 80089f2:	af04      	add	r7, sp, #16
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	4608      	mov	r0, r1
 80089f8:	4611      	mov	r1, r2
 80089fa:	461a      	mov	r2, r3
 80089fc:	4603      	mov	r3, r0
 80089fe:	70fb      	strb	r3, [r7, #3]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70bb      	strb	r3, [r7, #2]
 8008a04:	4613      	mov	r3, r2
 8008a06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008a16:	787c      	ldrb	r4, [r7, #1]
 8008a18:	78ba      	ldrb	r2, [r7, #2]
 8008a1a:	78f9      	ldrb	r1, [r7, #3]
 8008a1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a24:	9302      	str	r3, [sp, #8]
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	4623      	mov	r3, r4
 8008a32:	f7f8 fd9f 	bl	8001574 <HAL_HCD_HC_SubmitRequest>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f86f 	bl	8008b20 <USBH_Get_USB_Status>
 8008a42:	4603      	mov	r3, r0
 8008a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd90      	pop	{r4, r7, pc}

08008a50 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008a62:	78fa      	ldrb	r2, [r7, #3]
 8008a64:	4611      	mov	r1, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f9 f880 	bl	8001b6c <HAL_HCD_HC_GetURBState>
 8008a6c:	4603      	mov	r3, r0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d103      	bne.n	8008a94 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f872 	bl	8008b78 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008a94:	20c8      	movs	r0, #200	@ 0xc8
 8008a96:	f7f8 f93f 	bl	8000d18 <HAL_Delay>
  return USBH_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008aba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008abc:	78fa      	ldrb	r2, [r7, #3]
 8008abe:	68f9      	ldr	r1, [r7, #12]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	1a9b      	subs	r3, r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	440b      	add	r3, r1
 8008aca:	3317      	adds	r3, #23
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	68f9      	ldr	r1, [r7, #12]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	011b      	lsls	r3, r3, #4
 8008ada:	1a9b      	subs	r3, r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	333c      	adds	r3, #60	@ 0x3c
 8008ae2:	78ba      	ldrb	r2, [r7, #2]
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	e009      	b.n	8008afc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	68f9      	ldr	r1, [r7, #12]
 8008aec:	4613      	mov	r3, r2
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	333d      	adds	r3, #61	@ 0x3d
 8008af8:	78ba      	ldrb	r2, [r7, #2]
 8008afa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7f8 f900 	bl	8000d18 <HAL_Delay>
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b2e:	79fb      	ldrb	r3, [r7, #7]
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d817      	bhi.n	8008b64 <USBH_Get_USB_Status+0x44>
 8008b34:	a201      	add	r2, pc, #4	@ (adr r2, 8008b3c <USBH_Get_USB_Status+0x1c>)
 8008b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3a:	bf00      	nop
 8008b3c:	08008b4d 	.word	0x08008b4d
 8008b40:	08008b53 	.word	0x08008b53
 8008b44:	08008b59 	.word	0x08008b59
 8008b48:	08008b5f 	.word	0x08008b5f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b50:	e00b      	b.n	8008b6a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b52:	2302      	movs	r3, #2
 8008b54:	73fb      	strb	r3, [r7, #15]
    break;
 8008b56:	e008      	b.n	8008b6a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5c:	e005      	b.n	8008b6a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b5e:	2302      	movs	r3, #2
 8008b60:	73fb      	strb	r3, [r7, #15]
    break;
 8008b62:	e002      	b.n	8008b6a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b64:	2302      	movs	r3, #2
 8008b66:	73fb      	strb	r3, [r7, #15]
    break;
 8008b68:	bf00      	nop
  }
  return usb_status;
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d102      	bne.n	8008b92 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
 8008b90:	e001      	b.n	8008b96 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008b92:	2301      	movs	r3, #1
 8008b94:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	4803      	ldr	r0, [pc, #12]	@ (8008bac <MX_DriverVbusFS+0x34>)
 8008b9e:	f7f8 fb8d 	bl	80012bc <HAL_GPIO_WritePin>
}
 8008ba2:	bf00      	nop
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	40020800 	.word	0x40020800

08008bb0 <malloc>:
 8008bb0:	4b02      	ldr	r3, [pc, #8]	@ (8008bbc <malloc+0xc>)
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	f000 b82d 	b.w	8008c14 <_malloc_r>
 8008bba:	bf00      	nop
 8008bbc:	2000002c 	.word	0x2000002c

08008bc0 <free>:
 8008bc0:	4b02      	ldr	r3, [pc, #8]	@ (8008bcc <free+0xc>)
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	6818      	ldr	r0, [r3, #0]
 8008bc6:	f000 b8ef 	b.w	8008da8 <_free_r>
 8008bca:	bf00      	nop
 8008bcc:	2000002c 	.word	0x2000002c

08008bd0 <sbrk_aligned>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	4e0f      	ldr	r6, [pc, #60]	@ (8008c10 <sbrk_aligned+0x40>)
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	6831      	ldr	r1, [r6, #0]
 8008bd8:	4605      	mov	r5, r0
 8008bda:	b911      	cbnz	r1, 8008be2 <sbrk_aligned+0x12>
 8008bdc:	f000 f8ae 	bl	8008d3c <_sbrk_r>
 8008be0:	6030      	str	r0, [r6, #0]
 8008be2:	4621      	mov	r1, r4
 8008be4:	4628      	mov	r0, r5
 8008be6:	f000 f8a9 	bl	8008d3c <_sbrk_r>
 8008bea:	1c43      	adds	r3, r0, #1
 8008bec:	d103      	bne.n	8008bf6 <sbrk_aligned+0x26>
 8008bee:	f04f 34ff 	mov.w	r4, #4294967295
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	bd70      	pop	{r4, r5, r6, pc}
 8008bf6:	1cc4      	adds	r4, r0, #3
 8008bf8:	f024 0403 	bic.w	r4, r4, #3
 8008bfc:	42a0      	cmp	r0, r4
 8008bfe:	d0f8      	beq.n	8008bf2 <sbrk_aligned+0x22>
 8008c00:	1a21      	subs	r1, r4, r0
 8008c02:	4628      	mov	r0, r5
 8008c04:	f000 f89a 	bl	8008d3c <_sbrk_r>
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d1f2      	bne.n	8008bf2 <sbrk_aligned+0x22>
 8008c0c:	e7ef      	b.n	8008bee <sbrk_aligned+0x1e>
 8008c0e:	bf00      	nop
 8008c10:	200009d8 	.word	0x200009d8

08008c14 <_malloc_r>:
 8008c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c18:	1ccd      	adds	r5, r1, #3
 8008c1a:	f025 0503 	bic.w	r5, r5, #3
 8008c1e:	3508      	adds	r5, #8
 8008c20:	2d0c      	cmp	r5, #12
 8008c22:	bf38      	it	cc
 8008c24:	250c      	movcc	r5, #12
 8008c26:	2d00      	cmp	r5, #0
 8008c28:	4606      	mov	r6, r0
 8008c2a:	db01      	blt.n	8008c30 <_malloc_r+0x1c>
 8008c2c:	42a9      	cmp	r1, r5
 8008c2e:	d904      	bls.n	8008c3a <_malloc_r+0x26>
 8008c30:	230c      	movs	r3, #12
 8008c32:	6033      	str	r3, [r6, #0]
 8008c34:	2000      	movs	r0, #0
 8008c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d10 <_malloc_r+0xfc>
 8008c3e:	f000 f869 	bl	8008d14 <__malloc_lock>
 8008c42:	f8d8 3000 	ldr.w	r3, [r8]
 8008c46:	461c      	mov	r4, r3
 8008c48:	bb44      	cbnz	r4, 8008c9c <_malloc_r+0x88>
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7ff ffbf 	bl	8008bd0 <sbrk_aligned>
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	4604      	mov	r4, r0
 8008c56:	d158      	bne.n	8008d0a <_malloc_r+0xf6>
 8008c58:	f8d8 4000 	ldr.w	r4, [r8]
 8008c5c:	4627      	mov	r7, r4
 8008c5e:	2f00      	cmp	r7, #0
 8008c60:	d143      	bne.n	8008cea <_malloc_r+0xd6>
 8008c62:	2c00      	cmp	r4, #0
 8008c64:	d04b      	beq.n	8008cfe <_malloc_r+0xea>
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	eb04 0903 	add.w	r9, r4, r3
 8008c70:	f000 f864 	bl	8008d3c <_sbrk_r>
 8008c74:	4581      	cmp	r9, r0
 8008c76:	d142      	bne.n	8008cfe <_malloc_r+0xea>
 8008c78:	6821      	ldr	r1, [r4, #0]
 8008c7a:	1a6d      	subs	r5, r5, r1
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7ff ffa6 	bl	8008bd0 <sbrk_aligned>
 8008c84:	3001      	adds	r0, #1
 8008c86:	d03a      	beq.n	8008cfe <_malloc_r+0xea>
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	442b      	add	r3, r5
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	bb62      	cbnz	r2, 8008cf0 <_malloc_r+0xdc>
 8008c96:	f8c8 7000 	str.w	r7, [r8]
 8008c9a:	e00f      	b.n	8008cbc <_malloc_r+0xa8>
 8008c9c:	6822      	ldr	r2, [r4, #0]
 8008c9e:	1b52      	subs	r2, r2, r5
 8008ca0:	d420      	bmi.n	8008ce4 <_malloc_r+0xd0>
 8008ca2:	2a0b      	cmp	r2, #11
 8008ca4:	d917      	bls.n	8008cd6 <_malloc_r+0xc2>
 8008ca6:	1961      	adds	r1, r4, r5
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	6025      	str	r5, [r4, #0]
 8008cac:	bf18      	it	ne
 8008cae:	6059      	strne	r1, [r3, #4]
 8008cb0:	6863      	ldr	r3, [r4, #4]
 8008cb2:	bf08      	it	eq
 8008cb4:	f8c8 1000 	streq.w	r1, [r8]
 8008cb8:	5162      	str	r2, [r4, r5]
 8008cba:	604b      	str	r3, [r1, #4]
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f000 f82f 	bl	8008d20 <__malloc_unlock>
 8008cc2:	f104 000b 	add.w	r0, r4, #11
 8008cc6:	1d23      	adds	r3, r4, #4
 8008cc8:	f020 0007 	bic.w	r0, r0, #7
 8008ccc:	1ac2      	subs	r2, r0, r3
 8008cce:	bf1c      	itt	ne
 8008cd0:	1a1b      	subne	r3, r3, r0
 8008cd2:	50a3      	strne	r3, [r4, r2]
 8008cd4:	e7af      	b.n	8008c36 <_malloc_r+0x22>
 8008cd6:	6862      	ldr	r2, [r4, #4]
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	bf0c      	ite	eq
 8008cdc:	f8c8 2000 	streq.w	r2, [r8]
 8008ce0:	605a      	strne	r2, [r3, #4]
 8008ce2:	e7eb      	b.n	8008cbc <_malloc_r+0xa8>
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	6864      	ldr	r4, [r4, #4]
 8008ce8:	e7ae      	b.n	8008c48 <_malloc_r+0x34>
 8008cea:	463c      	mov	r4, r7
 8008cec:	687f      	ldr	r7, [r7, #4]
 8008cee:	e7b6      	b.n	8008c5e <_malloc_r+0x4a>
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	42a3      	cmp	r3, r4
 8008cf6:	d1fb      	bne.n	8008cf0 <_malloc_r+0xdc>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	6053      	str	r3, [r2, #4]
 8008cfc:	e7de      	b.n	8008cbc <_malloc_r+0xa8>
 8008cfe:	230c      	movs	r3, #12
 8008d00:	6033      	str	r3, [r6, #0]
 8008d02:	4630      	mov	r0, r6
 8008d04:	f000 f80c 	bl	8008d20 <__malloc_unlock>
 8008d08:	e794      	b.n	8008c34 <_malloc_r+0x20>
 8008d0a:	6005      	str	r5, [r0, #0]
 8008d0c:	e7d6      	b.n	8008cbc <_malloc_r+0xa8>
 8008d0e:	bf00      	nop
 8008d10:	200009dc 	.word	0x200009dc

08008d14 <__malloc_lock>:
 8008d14:	4801      	ldr	r0, [pc, #4]	@ (8008d1c <__malloc_lock+0x8>)
 8008d16:	f000 b845 	b.w	8008da4 <__retarget_lock_acquire_recursive>
 8008d1a:	bf00      	nop
 8008d1c:	20000b1c 	.word	0x20000b1c

08008d20 <__malloc_unlock>:
 8008d20:	4801      	ldr	r0, [pc, #4]	@ (8008d28 <__malloc_unlock+0x8>)
 8008d22:	f000 b840 	b.w	8008da6 <__retarget_lock_release_recursive>
 8008d26:	bf00      	nop
 8008d28:	20000b1c 	.word	0x20000b1c

08008d2c <memset>:
 8008d2c:	4402      	add	r2, r0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d100      	bne.n	8008d36 <memset+0xa>
 8008d34:	4770      	bx	lr
 8008d36:	f803 1b01 	strb.w	r1, [r3], #1
 8008d3a:	e7f9      	b.n	8008d30 <memset+0x4>

08008d3c <_sbrk_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d06      	ldr	r5, [pc, #24]	@ (8008d58 <_sbrk_r+0x1c>)
 8008d40:	2300      	movs	r3, #0
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	f000 f878 	bl	8008e3c <_sbrk>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d102      	bne.n	8008d56 <_sbrk_r+0x1a>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b103      	cbz	r3, 8008d56 <_sbrk_r+0x1a>
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	20000b18 	.word	0x20000b18

08008d5c <__libc_init_array>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8008d94 <__libc_init_array+0x38>)
 8008d60:	4c0d      	ldr	r4, [pc, #52]	@ (8008d98 <__libc_init_array+0x3c>)
 8008d62:	1b64      	subs	r4, r4, r5
 8008d64:	10a4      	asrs	r4, r4, #2
 8008d66:	2600      	movs	r6, #0
 8008d68:	42a6      	cmp	r6, r4
 8008d6a:	d109      	bne.n	8008d80 <__libc_init_array+0x24>
 8008d6c:	4d0b      	ldr	r5, [pc, #44]	@ (8008d9c <__libc_init_array+0x40>)
 8008d6e:	4c0c      	ldr	r4, [pc, #48]	@ (8008da0 <__libc_init_array+0x44>)
 8008d70:	f000 f872 	bl	8008e58 <_init>
 8008d74:	1b64      	subs	r4, r4, r5
 8008d76:	10a4      	asrs	r4, r4, #2
 8008d78:	2600      	movs	r6, #0
 8008d7a:	42a6      	cmp	r6, r4
 8008d7c:	d105      	bne.n	8008d8a <__libc_init_array+0x2e>
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}
 8008d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d84:	4798      	blx	r3
 8008d86:	3601      	adds	r6, #1
 8008d88:	e7ee      	b.n	8008d68 <__libc_init_array+0xc>
 8008d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d8e:	4798      	blx	r3
 8008d90:	3601      	adds	r6, #1
 8008d92:	e7f2      	b.n	8008d7a <__libc_init_array+0x1e>
 8008d94:	08008e94 	.word	0x08008e94
 8008d98:	08008e94 	.word	0x08008e94
 8008d9c:	08008e94 	.word	0x08008e94
 8008da0:	08008e98 	.word	0x08008e98

08008da4 <__retarget_lock_acquire_recursive>:
 8008da4:	4770      	bx	lr

08008da6 <__retarget_lock_release_recursive>:
 8008da6:	4770      	bx	lr

08008da8 <_free_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4605      	mov	r5, r0
 8008dac:	2900      	cmp	r1, #0
 8008dae:	d041      	beq.n	8008e34 <_free_r+0x8c>
 8008db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db4:	1f0c      	subs	r4, r1, #4
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfb8      	it	lt
 8008dba:	18e4      	addlt	r4, r4, r3
 8008dbc:	f7ff ffaa 	bl	8008d14 <__malloc_lock>
 8008dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e38 <_free_r+0x90>)
 8008dc2:	6813      	ldr	r3, [r2, #0]
 8008dc4:	b933      	cbnz	r3, 8008dd4 <_free_r+0x2c>
 8008dc6:	6063      	str	r3, [r4, #4]
 8008dc8:	6014      	str	r4, [r2, #0]
 8008dca:	4628      	mov	r0, r5
 8008dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd0:	f7ff bfa6 	b.w	8008d20 <__malloc_unlock>
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	d908      	bls.n	8008dea <_free_r+0x42>
 8008dd8:	6820      	ldr	r0, [r4, #0]
 8008dda:	1821      	adds	r1, r4, r0
 8008ddc:	428b      	cmp	r3, r1
 8008dde:	bf01      	itttt	eq
 8008de0:	6819      	ldreq	r1, [r3, #0]
 8008de2:	685b      	ldreq	r3, [r3, #4]
 8008de4:	1809      	addeq	r1, r1, r0
 8008de6:	6021      	streq	r1, [r4, #0]
 8008de8:	e7ed      	b.n	8008dc6 <_free_r+0x1e>
 8008dea:	461a      	mov	r2, r3
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	b10b      	cbz	r3, 8008df4 <_free_r+0x4c>
 8008df0:	42a3      	cmp	r3, r4
 8008df2:	d9fa      	bls.n	8008dea <_free_r+0x42>
 8008df4:	6811      	ldr	r1, [r2, #0]
 8008df6:	1850      	adds	r0, r2, r1
 8008df8:	42a0      	cmp	r0, r4
 8008dfa:	d10b      	bne.n	8008e14 <_free_r+0x6c>
 8008dfc:	6820      	ldr	r0, [r4, #0]
 8008dfe:	4401      	add	r1, r0
 8008e00:	1850      	adds	r0, r2, r1
 8008e02:	4283      	cmp	r3, r0
 8008e04:	6011      	str	r1, [r2, #0]
 8008e06:	d1e0      	bne.n	8008dca <_free_r+0x22>
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	6053      	str	r3, [r2, #4]
 8008e0e:	4408      	add	r0, r1
 8008e10:	6010      	str	r0, [r2, #0]
 8008e12:	e7da      	b.n	8008dca <_free_r+0x22>
 8008e14:	d902      	bls.n	8008e1c <_free_r+0x74>
 8008e16:	230c      	movs	r3, #12
 8008e18:	602b      	str	r3, [r5, #0]
 8008e1a:	e7d6      	b.n	8008dca <_free_r+0x22>
 8008e1c:	6820      	ldr	r0, [r4, #0]
 8008e1e:	1821      	adds	r1, r4, r0
 8008e20:	428b      	cmp	r3, r1
 8008e22:	bf04      	itt	eq
 8008e24:	6819      	ldreq	r1, [r3, #0]
 8008e26:	685b      	ldreq	r3, [r3, #4]
 8008e28:	6063      	str	r3, [r4, #4]
 8008e2a:	bf04      	itt	eq
 8008e2c:	1809      	addeq	r1, r1, r0
 8008e2e:	6021      	streq	r1, [r4, #0]
 8008e30:	6054      	str	r4, [r2, #4]
 8008e32:	e7ca      	b.n	8008dca <_free_r+0x22>
 8008e34:	bd38      	pop	{r3, r4, r5, pc}
 8008e36:	bf00      	nop
 8008e38:	200009dc 	.word	0x200009dc

08008e3c <_sbrk>:
 8008e3c:	4a04      	ldr	r2, [pc, #16]	@ (8008e50 <_sbrk+0x14>)
 8008e3e:	6811      	ldr	r1, [r2, #0]
 8008e40:	4603      	mov	r3, r0
 8008e42:	b909      	cbnz	r1, 8008e48 <_sbrk+0xc>
 8008e44:	4903      	ldr	r1, [pc, #12]	@ (8008e54 <_sbrk+0x18>)
 8008e46:	6011      	str	r1, [r2, #0]
 8008e48:	6810      	ldr	r0, [r2, #0]
 8008e4a:	4403      	add	r3, r0
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	4770      	bx	lr
 8008e50:	20000b20 	.word	0x20000b20
 8008e54:	20000b28 	.word	0x20000b28

08008e58 <_init>:
 8008e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5a:	bf00      	nop
 8008e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e5e:	bc08      	pop	{r3}
 8008e60:	469e      	mov	lr, r3
 8008e62:	4770      	bx	lr

08008e64 <_fini>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	bf00      	nop
 8008e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e6a:	bc08      	pop	{r3}
 8008e6c:	469e      	mov	lr, r3
 8008e6e:	4770      	bx	lr
